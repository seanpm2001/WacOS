// RUN: %target-sil-opt -enable-sil-verify-all %s -jumpthread-simplify-cfg -enable-ossa-simplify-cfg -enable-ossa-rewriteterminator | %FileCheck %s
// RUN: %target-sil-opt -enable-sil-verify-all %s -jumpthread-simplify-cfg -enable-ossa-simplify-cfg -enable-ossa-rewriteterminator -debug-only=sil-simplify-cfg 2>&1 | %FileCheck %s --check-prefix=CHECK-TRACE
//
// REQUIRES: EnableOSSASimplifyCFG

// FIXME: When OSSA optimization is complete, convert XCHECK to CHECK lines

// FIXME: which of these tests actually require -jumpthread-simplify-cfg instead of -simplify-cfg?

sil_stage canonical

import Builtin
import Swift

class Klass {
  var a: Int
   deinit
  init()
}

protocol OtherKlass : AnyObject {}

sil [ossa] @consume_klass : $@convention(thin) (@owned Klass) -> ()
sil [ossa] @use_klass : $@convention(thin) (@guaranteed Klass) -> ()
sil [ossa] @get_klass : $@convention(thin) () -> @owned Klass

sil [ossa] @unknown : $@convention(thin) () -> ()

struct KlassWrapper {
  var k: Klass
}

class Base {
  @inline(never) func inner()
  func middle()
  func outer()
}
class Derived : Base {
  override func inner()
  @inline(never) final override func middle()
}

class Final : Derived {
}

sil [ossa] @_TFC3ccb4Base5innerfS0_FT_T_ : $@convention(method) (@guaranteed Base) -> ()
sil [ossa] @_TFC3ccb4Base6middlefS0_FT_T_ : $@convention(method) (@guaranteed Base) -> ()

// CHECK-LABEL: sil [ossa] @redundant_checked_cast_br
sil [ossa] @redundant_checked_cast_br : $@convention(method) (@guaranteed Base) -> () {
bb0(%0 : @guaranteed $Base):
// CHECK: [[METHOD:%.*]] = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  %1 = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
// CHECK: checked_cast_br [exact] %0 : $Base to Base, [[SUCCESS:bb[0-9]+]], [[FAIL:bb[0-9]+]]
  checked_cast_br [exact] %0 : $Base to Base, bb2, bb7

// CHECK: bb1
bb1:
  %3 = tuple ()
  return %3 : $()

bb2(%5 : @guaranteed $Base):
// CHECK: [[SUCCESS]]
  %7 = class_method %0 : $Base, #Base.inner : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
// XCHECK-NOT: checked_cast_br
  checked_cast_br [exact] %0 : $Base to Base, bb3, bb5
// CHECK: [[INNER:%.*]] = function_ref @_TFC3ccb4Base5innerfS0_FT_T_ : $@convention(method) (@guaranteed Base) -> ()
// CHECK: apply [[INNER]]
// CHECK: br bb1

bb3(%9 : @guaranteed $Base):
// CHECK: [[FAIL]]
// CHECK-NOT: function-ref
// CHECK: apply [[METHOD]]

  %10 = function_ref @_TFC3ccb4Base5innerfS0_FT_T_ : $@convention(method) (@guaranteed Base) -> ()
  %11 = apply %10(%0) : $@convention(method) (@guaranteed Base) -> ()
  br bb4

bb4:
  %13 = tuple ()
  br bb6(%13 : $())

bb5(%defaultBB2 : @guaranteed $Base):
  %15 = apply %7(%0) : $@convention(method) (@guaranteed Base) -> ()
  br bb4

bb6(%17 : $()):
  br bb1

bb7(%defaultBB0 : @guaranteed $Base):
  %19 = apply %1(%0) : $@convention(method) (@guaranteed Base) -> ()
  br bb1
}

// CHECK-LABEL: sil [ossa] @redundant_checked_cast_br_owned
sil [ossa] @redundant_checked_cast_br_owned : $@convention(method) (@guaranteed Base) -> () {
// CHECK: [[COPY:%.*]] = copy_value %0
// CHECK: [[METHOD:%.*]] = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
// CHECK: checked_cast_br [exact] [[COPY]] : $Base to Base, [[SUCCESS:bb[0-9]+]], [[FAIL:bb[0-9]+]]
bb0(%0 : @guaranteed $Base):
  %copy = copy_value %0 : $Base
  %1 = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  checked_cast_br [exact] %copy : $Base to Base, bb2, bb7

// CHECK: bb1
bb1:
  %3 = tuple ()
  return %3 : $()

// CHECK: [[SUCCESS]]([[SUCCESSARG:%.*]] : @owned $Base)
// XCHECK-NOT: checked_cast_br
// XCHECK: [[INNER:%.*]] = function_ref @_TFC3ccb4Base5innerfS0_FT_T_ : $@convention(method) (@guaranteed Base) -> ()
// XCHECK: apply [[INNER]]([[SUCCESSARG]])
// CHECK: br bb1
bb2(%5 : @owned $Base):
  %7 = class_method %0 : $Base, #Base.inner : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  checked_cast_br [exact] %5 : $Base to Base, bb3, bb5

// CHECK: [[FAIL]]([[FAILARG:%.*]] : @owned $Base)
// CHECK-NOT: function-ref
// CHECK: apply [[METHOD]]([[FAILARG]])
bb3(%9 : @owned $Base):
  %10 = function_ref @_TFC3ccb4Base5innerfS0_FT_T_ : $@convention(method) (@guaranteed Base) -> ()
  %11 = apply %10(%9) : $@convention(method) (@guaranteed Base) -> ()
  destroy_value %9 : $Base
  br bb4

bb4:
  %13 = tuple ()
  br bb6(%13 : $())

bb5(%defaultBB2 : @owned $Base):
  %15 = apply %7(%defaultBB2) : $@convention(method) (@guaranteed Base) -> ()
  destroy_value %defaultBB2 : $Base
  br bb4

bb6(%17 : $()):
  br bb1

bb7(%defaultBB0 : @owned $Base):
  %19 = apply %1(%defaultBB0) : $@convention(method) (@guaranteed Base) -> ()
  destroy_value %defaultBB0 : $Base
  br bb1
}

// CHECK-LABEL: sil [ossa] @not_redundant_checked_cast_br : $@convention(method) (@guaranteed Base) -> () {
sil [ossa] @not_redundant_checked_cast_br : $@convention(method) (@guaranteed Base) -> () {
bb0(%0 : @guaranteed $Base):
// CHECK: [[METHOD:%.*]] = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  %1 = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
// CHECK: checked_cast_br [exact] %0 : $Base to Base, [[SUCCESS:bb[0-9]+]], [[FAIL:bb[0-9]+]]
  checked_cast_br [exact] %0 : $Base to Base, bb2, bb7

// CHECK: bb1:
// CHECK: tuple ()
// CHECK: return

bb1:
  %3 = tuple ()
  return %3 : $()

bb2(%5 : @guaranteed $Base):
// CHECK: [[SUCCESS]]
// CHECK: [[METHOD2:%.*]] = class_method %0 : $Base, #Base.inner : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  %7 = class_method %0 : $Base, #Base.inner : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  %8 = apply %7(%0) : $@convention(method) (@guaranteed Base) -> ()
  br bb4

bb3(%9 : @guaranteed $Derived):
  %10 = function_ref @_TFC3ccb4Base5innerfS0_FT_T_ : $@convention(method) (@guaranteed Base) -> ()
  %11 = apply %10(%0) : $@convention(method) (@guaranteed Base) -> ()
  br bb4

bb4:
  %13 = tuple ()
  br bb6(%13 : $())

bb5(%9a : @guaranteed $Base):
  %14 = class_method %0 : $Base, #Base.inner : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  %15 = apply %14(%0) : $@convention(method) (@guaranteed Base) -> ()
  br bb4

bb6(%17 : $()):
  br bb1

bb7(%10a : @guaranteed $Base):
// CHECK: checked_cast_br [exact] %0 : $Base to Derived
  checked_cast_br [exact] %0 : $Base to Derived, bb3, bb5
}

// CHECK-LABEL: sil [ossa] @failing_checked_cast_br
sil [ossa] @failing_checked_cast_br : $@convention(method) (@guaranteed Base) -> () {
bb0(%0 : @guaranteed $Base):
// CHECK: [[METHOD:%.*]] = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  %1 = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
// CHECK: checked_cast_br [exact] %0 : $Base to Base, [[SUCCESS:bb[0-9]+]], [[FAIL:bb[0-9]+]]
  checked_cast_br [exact] %0 : $Base to Base, bb2, bb7

// CHECK-LABEL: bb1
bb1:
  %3 = tuple ()
  return %3 : $()

bb2(%5 : @guaranteed $Base):
// CHECK: [[SUCCESS]]([[SUCCESSARG:%.*]] : @guaranteed $Base)
// CHECK: [[METHOD2:%.*]] = class_method %0 : $Base, #Base.inner : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  %7 = class_method %0 : $Base, #Base.inner : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
// XCHECK-NOT: checked_cast_br [exact] %0 : $Base to Derived
// XCHECK: apply [[METHOD2]]([[SUCCESSARG]])
// Check that checked_cast_br [exact] was replaced by a branch to the failure BB of the checked_cast_br.
// This is because bb2 is reached via the success branch of the checked_cast_br [exact] from bb0.
// It means that the exact dynamic type of %0 is $Base. Thus it cannot be $Derived.
// CHECK: br bb1
  checked_cast_br [exact] %5 : $Base to Derived, bb3, bb5

bb3(%9 : @guaranteed $Derived):
  %10 = function_ref @_TFC3ccb4Base5innerfS0_FT_T_ : $@convention(method) (@guaranteed Base) -> ()
  %11 = apply %10(%0) : $@convention(method) (@guaranteed Base) -> ()
  br bb4

bb4:
  %13 = tuple ()
  br bb6(%13 : $())

bb5(%9o : @guaranteed $Base):
  %15 = apply %7(%9o) : $@convention(method) (@guaranteed Base) -> ()
  br bb4

bb6(%17 : $()):
  br bb1

bb7(%anotherDefaultPayload : @guaranteed $Base):
  %19 = apply %1(%0) : $@convention(method) (@guaranteed Base) -> ()
  br bb1
}

// CHECK-LABEL: sil [ossa] @failing_checked_cast_br_owned
sil [ossa] @failing_checked_cast_br_owned : $@convention(method) (@guaranteed Base) -> () {
// CHECK: [[COPY:%.*]] = copy_value %0
// CHECK: [[METHOD:%.*]] = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
// CHECK: checked_cast_br [exact] [[COPY]] : $Base to Base, [[SUCCESS:bb[0-9]+]], [[FAIL:bb[0-9]+]]
bb0(%0 : @guaranteed $Base):
  %copy = copy_value %0 : $Base
  %1 = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  checked_cast_br [exact] %copy : $Base to Base, bb2, bb7

// CHECK-LABEL: bb1
bb1:
  %3 = tuple ()
  return %3 : $()

// CHECK: [[SUCCESS]]([[SUCCESSARG:%.*]] : @owned $Base)
// CHECK: [[METHOD2:%.*]] = class_method %0 : $Base, #Base.inner : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
// XCHECK-NOT: checked_cast_br [exact] %0 : $Base to Derived
// XCHECK: apply [[METHOD2]]([[SUCCESSARG]])
// Check that checked_cast_br [exact] was replaced by a branch to the failure BB of the checked_cast_br.
// This is because bb2 is reached via the success branch of the checked_cast_br [exact] from bb0.
// It means that the exact dynamic type of %0 is $Base. Thus it cannot be $Derived.
// CHECK: br bb1
bb2(%5 : @owned $Base):
  %7 = class_method %0 : $Base, #Base.inner : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  checked_cast_br [exact] %5 : $Base to Derived, bb3, bb5

bb3(%9 : @owned $Derived):
  %upcast = upcast %9 : $Derived to $Base
  %10 = function_ref @_TFC3ccb4Base5innerfS0_FT_T_ : $@convention(method) (@guaranteed Base) -> ()
  %11 = apply %10(%upcast) : $@convention(method) (@guaranteed Base) -> ()
  destroy_value %upcast : $Base
  br bb4

bb4:
  %13 = tuple ()
  br bb6(%13 : $())

bb5(%9o : @owned $Base):
  %15 = apply %7(%9o) : $@convention(method) (@guaranteed Base) -> ()
  destroy_value %9o : $Base
  br bb4

bb6(%17 : $()):
  br bb1

bb7(%anotherDefaultPayload : @owned $Base):
  %19 = apply %1(%0) : $@convention(method) (@guaranteed Base) -> ()
  destroy_value %anotherDefaultPayload : $Base
  br bb1
}

sil [ossa] @unknown2 : $@convention(thin) () -> ()

// CHECK-LABEL: no_checked_cast_br_threading_with_alloc_ref_stack
// CHECK: checked_cast_br
// CHECK: apply
// CHECK: apply
// CHECK: checked_cast_br
// CHECK: apply
// CHECK: apply
// CHECK: return
sil [ossa] @no_checked_cast_br_threading_with_alloc_ref_stack : $@convention(method) (@guaranteed Base) -> () {
bb0(%0 : @guaranteed $Base):
  %fu = function_ref @unknown : $@convention(thin) () -> ()
  %fu2 = function_ref @unknown2 : $@convention(thin) () -> ()
  checked_cast_br [exact] %0 : $Base to Base, bb1, bb2

bb1(%1 : @guaranteed $Base):
  apply %fu() : $@convention(thin) () -> ()
  br bb3

bb2(%1a : @guaranteed $Base):
  apply %fu2() : $@convention(thin) () -> ()
  br bb3

bb3:
  %a = alloc_ref [stack] $Base
  checked_cast_br [exact] %0 : $Base to Base, bb4, bb5

bb4(%2 : @guaranteed $Base):
  apply %fu() : $@convention(thin) () -> ()
  br bb6

bb5(%2a : @guaranteed $Base):
  apply %fu2() : $@convention(thin) () -> ()
  br bb6

bb6:
  dealloc_ref [stack] %a : $Base
  %r = tuple()
  return %r : $()
}

// Test a redundant checked_cast_br that has success, failure paths, and unknown paths.
//
// TODO: this is currently a bailout.
//
//!!! CHECKME
sil [ossa] @redundant_checked_cast_br_joined_success_fail_unknown : $@convention(method) (@guaranteed Base) -> () {
bb0(%0 : @guaranteed $Base):
  %middle = class_method %0 : $Base, #Base.middle : (Base) -> () -> (), $@convention(method) (@guaranteed Base) -> ()
  checked_cast_br [exact] %0 : $Base to Base, bb1, bb4

bb1(%successBB0 : @guaranteed $Base):
  cond_br undef, bb2, bb3

bb2:
  %successBB0call2 = apply %middle(%successBB0) : $@convention(method) (@guaranteed Base) -> ()
  %successBB0borrow2 = begin_borrow %successBB0 : $Base
  br bb8(%successBB0borrow2 : $Base)

bb3:
  %successBB0call3 = apply %middle(%successBB0) : $@convention(method) (@guaranteed Base) -> ()
  %successBB0borrow3 = begin_borrow %successBB0 : $Base
  br bb7(%successBB0borrow3 : $Base)

bb4(%failBB0 : @guaranteed $Base):
  cond_br undef, bb5, bb6

bb5:
  %failBB0call5 = apply %middle(%failBB0) : $@convention(method) (@guaranteed Base) -> ()
  %failBB0borrow5 = begin_borrow %failBB0 : $Base
  br bb7(%failBB0borrow5 : $Base)

bb6:
  %failBB0call6 = apply %middle(%failBB0) : $@convention(method) (@guaranteed Base) -> ()
  %failBB0borrow6 = begin_borrow %failBB0 : $Base
  br bb8(%failBB0borrow6 : $Base)

bb7(%unknown : @guaranteed $Base):
  %unknownCall = apply %middle(%unknown) : $@convention(method) (@guaranteed Base) -> ()
  br bb8(%unknown : $Base)

bb8(%joined : @guaranteed $Base):
  %joinedCall = apply %middle(%joined) : $@convention(method) (@guaranteed Base) -> ()
  checked_cast_br [exact] %joined : $Base to Base, bb9, bb10

bb9(%successBB7 : @guaranteed $Base):
  %successBB7call8 = apply %middle(%successBB7) : $@convention(method) (@guaranteed Base) -> ()
  br bb11

bb10(%failBB7 : @guaranteed $Base):
  %failBB7call8 = apply %middle(%failBB7) : $@convention(method) (@guaranteed Base) -> ()
  br bb11

bb11:
  end_borrow %joined : $Base
  %20 = tuple ()
  return %20 : $()

}

// Verify that checked-cast jump-threading kicks in and generates verifiable SIL.
//
// CHECK-TRACE-LABEL: ### Run SimplifyCFG on $testCheckCastJumpThread
// XCHECK-TRACE: Condition is the same if reached over {{.*}} parent @$testCheckCastJumpThread : $@convention(thin) (@guaranteed Klass) -> @owned OtherKlass }
// XCHECK-TRACE-NEXT: bb3(%{{.*}} : $OtherKlass):
// XCHECK-TRACE-NEXT:   br bb5(%{{.*}} : $Klass)
sil shared [ossa] @$testCheckCastJumpThread : $@convention(thin) (@guaranteed Klass) -> @owned OtherKlass {
bb0(%0 : @guaranteed $Klass):
  %1 = function_ref @get_klass : $@convention(thin) () -> @owned Klass
  %2 = integer_literal $Builtin.Int64, 1
  %3 = apply %1() : $@convention(thin) () -> @owned Klass
  %4 = copy_value %3 : $Klass
  checked_cast_br %3 : $Klass to OtherKlass, bb1, bb2

bb1(%5 : $OtherKlass):
  destroy_value %5 : $OtherKlass
  %6 = integer_literal $Builtin.Int1, -1
  br bb3(%6 : $Builtin.Int1)

bb2(%7 : @owned $Klass):
  destroy_value %7 : $Klass
  %8 = integer_literal $Builtin.Int1, 0
  br bb3(%8 : $Builtin.Int1)

bb3(%10 : $Builtin.Int1):
  cond_br %10, bb5, bb6

bb4:
  unreachable

bb5:
  br bb7(%4 : $Klass)

bb6:
  destroy_value %4 : $Klass
  br bb10(%2 : $Builtin.Int64)

bb7(%16 : @owned $Klass):
  checked_cast_br %16 : $Klass to OtherKlass, bb9, bb8

bb8(%18 : $Klass):
  destroy_value %18 : $Klass
  br bb4

bb9(%20 : $OtherKlass):
  return %20 : $OtherKlass

bb10(%22 : $Builtin.Int64):
  %23 = apply %1() : $@convention(thin) () -> @owned Klass
  %24 = copy_value %23 : $Klass
  checked_cast_br %23 : $Klass to OtherKlass, bb11, bb12

bb11(%25 : $OtherKlass):
  %26 = integer_literal $Builtin.Int1, -1
  br bb13(%26 : $Builtin.Int1)

bb12(%27 : @owned $Klass):
  destroy_value %27 : $Klass
  %28 = integer_literal $Builtin.Int1, 0
  br bb13(%28 : $Builtin.Int1)

bb13(%30 : $Builtin.Int1):
  cond_br %30, bb14, bb15

bb14:
  br bb7(%24 : $Klass)

bb15:
  destroy_value %24 : $Klass
  cond_br undef, bb16, bb17

bb16:
  br bb4

bb17:
  br bb10(undef : $Builtin.Int64)
}
