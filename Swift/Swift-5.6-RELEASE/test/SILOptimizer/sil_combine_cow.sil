// RUN: %target-sil-opt -enable-sil-verify-all %s -sil-combine | %FileCheck %s

// REQUIRES: libswift

import Builtin
import Swift
import SwiftShims

class Buffer {}

sil_global @_swiftEmptyArrayStorage : $_SwiftEmptyArrayStorage

// CHECK-LABEL: sil [ossa] @remove_end_begin_cow_pair
// CHECK-NOT: end_cow_mutation
// CHECK-NOT: begin_cow_mutation
// CHECK:     return %0
// CHECK: } // end sil function 'remove_end_begin_cow_pair'
sil [ossa] @remove_end_begin_cow_pair : $@convention(thin) (@owned Buffer) -> @owned Buffer {
bb0(%0 : @owned $Buffer):
  %e = end_cow_mutation %0 : $Buffer
  debug_value %e : $Buffer, var, name "x"
  (%u, %b) = begin_cow_mutation %e : $Buffer
  return %b : $Buffer
}

// CHECK-LABEL: sil [ossa] @dont_remove_end_begin_cow_pair1
// CHECK:   end_cow_mutation
// CHECK:   begin_cow_mutation
// CHECK: } // end sil function 'dont_remove_end_begin_cow_pair1'
sil [ossa] @dont_remove_end_begin_cow_pair1 : $@convention(thin) (@owned Buffer) -> @owned (Buffer, Buffer) {
bb0(%0 : @owned $Buffer):
  %e = end_cow_mutation %0 : $Buffer
  %c = copy_value %e : $Buffer
  (%u, %b) = begin_cow_mutation %e : $Buffer
  %t = tuple (%c : $Buffer, %b : $Buffer)
  return %t : $(Buffer, Buffer)
}

// CHECK-LABEL: sil [ossa] @dont_remove_end_begin_cow_pair2
// CHECK:   end_cow_mutation
// CHECK:   begin_cow_mutation
// CHECK: } // end sil function 'dont_remove_end_begin_cow_pair2'
sil [ossa] @dont_remove_end_begin_cow_pair2 : $@convention(thin) (@owned Buffer) -> @owned (Builtin.Int1, Buffer) {
bb0(%0 : @owned $Buffer):
  %e = end_cow_mutation %0 : $Buffer
  (%u, %b) = begin_cow_mutation %e : $Buffer
  %t = tuple (%u : $Builtin.Int1, %b : $Buffer)
  return %t : $(Builtin.Int1, Buffer)
}

// CHECK-LABEL: sil [ossa] @remove_begin_end_cow_pair
// CHECK-NOT: end_cow_mutation
// CHECK-NOT: begin_cow_mutation
// CHECK:     return %0
// CHECK: } // end sil function 'remove_begin_end_cow_pair'
sil [ossa] @remove_begin_end_cow_pair : $@convention(thin) (@owned Buffer) -> @owned Buffer {
bb0(%0 : @owned $Buffer):
  (%u, %b) = begin_cow_mutation %0 : $Buffer
  debug_value %u : $Builtin.Int1, var, name "x"
  debug_value %b : $Buffer, var, name "y"
  %e = end_cow_mutation %b : $Buffer
  return %e : $Buffer
}

// CHECK-LABEL: sil [ossa] @dont_remove_begin_end_cow_pair1
// CHECK:   begin_cow_mutation
// CHECK:   end_cow_mutation
// CHECK: } // end sil function 'dont_remove_begin_end_cow_pair1'
sil [ossa] @dont_remove_begin_end_cow_pair1 : $@convention(thin) (@owned Buffer) -> @owned (Buffer, Buffer) {
bb0(%0 : @owned $Buffer):
  (%u, %b) = begin_cow_mutation %0 : $Buffer
  %c = copy_value %b : $Buffer
  %e = end_cow_mutation %b : $Buffer
  %t = tuple (%c : $Buffer, %e : $Buffer)
  return %t : $(Buffer, Buffer)
}

// CHECK-LABEL: sil [ossa] @dont_remove_begin_end_cow_pair2
// CHECK:   begin_cow_mutation
// CHECK:   end_cow_mutation
// CHECK: } // end sil function 'dont_remove_begin_end_cow_pair2'
sil [ossa] @dont_remove_begin_end_cow_pair2 : $@convention(thin) (@owned Buffer) -> @owned (Builtin.Int1, Buffer) {
bb0(%0 : @owned $Buffer):
  (%u, %b) = begin_cow_mutation %0 : $Buffer
  %e = end_cow_mutation %b : $Buffer
  %t = tuple (%u : $Builtin.Int1, %e : $Buffer)
  return %t : $(Builtin.Int1, Buffer)
}

// CHECK-LABEL: sil @optimize_empty_cow_singleton
// CHECK:   [[I:%[0-9]+]] = integer_literal $Builtin.Int1, 0
// CHECK:   begin_cow_mutation
// CHECK:   [[T:%[0-9]+]] = tuple ([[I]]
// CHECK:   return [[T]]
// CHECK: } // end sil function 'optimize_empty_cow_singleton'
sil @optimize_empty_cow_singleton : $@convention(thin) () -> (Builtin.Int1, @owned Builtin.BridgeObject) {
bb0:
  %3 = global_addr @_swiftEmptyArrayStorage : $*_SwiftEmptyArrayStorage
  %4 = address_to_pointer %3 : $*_SwiftEmptyArrayStorage to $Builtin.RawPointer
  %5 = raw_pointer_to_ref %4 : $Builtin.RawPointer to $__EmptyArrayStorage
  %6 = unchecked_ref_cast %5 : $__EmptyArrayStorage to $Builtin.BridgeObject
  (%u, %b) = begin_cow_mutation %6 : $Builtin.BridgeObject
  %t = tuple (%u : $Builtin.Int1, %b : $Builtin.BridgeObject)
  return %t : $(Builtin.Int1, Builtin.BridgeObject)
}

