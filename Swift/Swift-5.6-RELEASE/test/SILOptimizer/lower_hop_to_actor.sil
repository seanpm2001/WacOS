// RUN: %target-sil-opt -enable-sil-verify-all %s -lower-hop-to-actor  | %FileCheck %s

// REQUIRES: concurrency

sil_stage canonical

import Builtin
import Swift
import _Concurrency

actor MyActor {
  @_hasStorage private var p: Int { get set }
}

actor CustomActor {
  nonisolated var unownedExecutor: UnownedSerialExecutor { get }
}

// CHECK-LABEL: sil [ossa] @simple :
sil [ossa] @simple : $@async (@guaranteed MyActor) -> () {
bb0(%0 : @guaranteed $MyActor):
// CHECK:      bb0(%0 : @guaranteed $MyActor):
// CHECK-NEXT:   [[EXECUTOR:%.*]] = builtin "buildDefaultActorExecutorRef"<MyActor>(%0 : $MyActor) : $Builtin.Executor
// CHECK-NEXT:   [[DEPEND:%.*]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %0 : $MyActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   [[RET:%.*]] = tuple ()
// CHECK-NEXT:   return [[RET]] : $()
  hop_to_executor %0 : $MyActor
  %r = tuple ()
  return %r : $()
}

// CHECK-LABEL: sil [ossa] @pair :
sil [ossa] @pair : $@async (@guaranteed MyActor, @guaranteed MyActor) -> () {
bb0(%0 : @guaranteed $MyActor, %1 : @guaranteed $MyActor):
// CHECK:      bb0(%0 : @guaranteed $MyActor, %1 : @guaranteed $MyActor):
// CHECK-NEXT:   [[EXECUTOR:%.*]] = builtin "buildDefaultActorExecutorRef"<MyActor>(%0 : $MyActor) : $Builtin.Executor
// CHECK-NEXT:   [[DEPEND:%.*]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %0 : $MyActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   [[EXECUTOR:%.*]] = builtin "buildDefaultActorExecutorRef"<MyActor>(%1 : $MyActor) : $Builtin.Executor
// CHECK-NEXT:   [[DEPEND:%.*]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %1 : $MyActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   [[RET:%.*]] = tuple ()
// CHECK-NEXT:   return [[RET]] : $()
  hop_to_executor %0 : $MyActor
  hop_to_executor %1 : $MyActor
  %r = tuple ()
  return %r : $()
}

// CHECK-LABEL: sil [ossa] @immediate_dominance :
sil [ossa] @immediate_dominance : $@async (@guaranteed MyActor) -> () {
bb0(%0 : @guaranteed $MyActor):
// CHECK:      bb0(%0 : @guaranteed $MyActor):
// CHECK-NEXT:   [[EXECUTOR:%.*]] = builtin "buildDefaultActorExecutorRef"<MyActor>(%0 : $MyActor) : $Builtin.Executor
// CHECK-NEXT:   [[DEPEND:%.*]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %0 : $MyActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   [[RET:%.*]] = tuple ()
// CHECK-NEXT:   return [[RET]] : $()
  hop_to_executor %0 : $MyActor
  hop_to_executor %0 : $MyActor
  %r = tuple ()
  return %r : $()
}

// CHECK-LABEL: sil [ossa] @multi_block :
sil [ossa] @multi_block : $@async (@guaranteed MyActor, Builtin.Int1) -> () {
bb0(%0 : @guaranteed $MyActor, %1 : $Builtin.Int1):
// CHECK:      bb0(%0 : @guaranteed $MyActor, %1 : $Builtin.Int1):
// CHECK-NEXT:   cond_br %1, bb1, bb2
// CHECK:      bb1:
// CHECK-NEXT:   [[EXECUTOR:%.*]] = builtin "buildDefaultActorExecutorRef"<MyActor>(%0 : $MyActor) : $Builtin.Executor
// CHECK-NEXT:   [[DEPEND:%.*]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %0 : $MyActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb3
// CHECK:      bb2:
// CHECK-NEXT:   [[EXECUTOR:%.*]] = builtin "buildDefaultActorExecutorRef"<MyActor>(%0 : $MyActor) : $Builtin.Executor
// CHECK-NEXT:   [[DEPEND:%.*]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %0 : $MyActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb3
// CHECK:      bb3:
// CHECK-NEXT:   [[RET:%.*]] = tuple ()
// CHECK-NEXT:   return [[RET]] : $()
  cond_br %1, bb1, bb2
bb1:
  hop_to_executor %0 : $MyActor
  br bb3
bb2:
  hop_to_executor %0 : $MyActor
  br bb3
bb3:
  %r = tuple ()
  return %r : $()
}

//   Test that we apply the dominance-based optimization correctly even
//   opposite to program order.
// CHECK-LABEL: sil [ossa] @reverse :
sil [ossa] @reverse : $@async (@guaranteed MyActor, Builtin.Int1) -> () {
bb0(%0 : @guaranteed $MyActor, %1 : $Builtin.Int1):
// CHECK:      bb0(%0 : @guaranteed $MyActor, %1 : $Builtin.Int1):
// CHECK-NEXT:   br bb5
// CHECK:      bb1:
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND:%.*]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb6
// CHECK:      bb2:
// CHECK-NEXT:   [[EXECUTOR:%.*]] = builtin "buildDefaultActorExecutorRef"<MyActor>(%0 : $MyActor) : $Builtin.Executor
// CHECK-NEXT:   [[DEPEND]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %0 : $MyActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb1
// CHECK:      bb3:
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND:%.*]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb6
// CHECK:      bb4:
// CHECK-NEXT:   [[EXECUTOR:%.*]] = builtin "buildDefaultActorExecutorRef"<MyActor>(%0 : $MyActor) : $Builtin.Executor
// CHECK-NEXT:   [[DEPEND]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %0 : $MyActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb3
// CHECK:      bb5:
// CHECK-NEXT:   cond_br %1, bb2, bb4
// CHECK:      bb6:
// CHECK-NEXT:   [[RET:%.*]] = tuple ()
// CHECK-NEXT:   return [[RET]] : $()
  br bb5
bb1:
  hop_to_executor %0 : $MyActor
  br bb6
bb2:
  hop_to_executor %0 : $MyActor
  br bb1
bb3:
  hop_to_executor %0 : $MyActor
  br bb6
bb4:
  hop_to_executor %0 : $MyActor
  br bb3
bb5:
  cond_br %1, bb2, bb4
bb6:
  %r = tuple ()
  return %r : $()
}

//   Test that we merge blocks appropriately in dominance optimizations.
// CHECK-LABEL: sil [ossa] @reverse_merge :
sil [ossa] @reverse_merge : $@async (@guaranteed MyActor, Builtin.Int1) -> () {
bb0(%0 : @guaranteed $MyActor, %1 : $Builtin.Int1):
// CHECK:      bb0(%0 : @guaranteed $MyActor, %1 : $Builtin.Int1):
// CHECK-NEXT:   br bb5
// CHECK:      bb1:
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND:%.*]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb6
// CHECK:      bb2:
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb1
// CHECK:      bb3:
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb6
// CHECK:      bb4:
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   br bb3
// CHECK:      bb5:
// CHECK-NEXT:   [[EXECUTOR:%.*]] = builtin "buildDefaultActorExecutorRef"<MyActor>(%0 : $MyActor) : $Builtin.Executor
// CHECK-NEXT:   [[DEPEND:%.*]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %0 : $MyActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   cond_br %1, bb2, bb4
// CHECK:      bb6:
// CHECK-NEXT:   [[RET:%.*]] = tuple ()
// CHECK-NEXT:   return [[RET]] : $()
  br bb5
bb1:
  hop_to_executor %0 : $MyActor
  br bb6
bb2:
  hop_to_executor %0 : $MyActor
  br bb1
bb3:
  hop_to_executor %0 : $MyActor
  br bb6
bb4:
  hop_to_executor %0 : $MyActor
  br bb3
bb5:
  hop_to_executor %0 : $MyActor
  cond_br %1, bb2, bb4
bb6:
  %r = tuple ()
  return %r : $()
}

// CHECK-LABEL: sil [ossa] @simple_custom :
sil [ossa] @simple_custom : $@async (@guaranteed CustomActor) -> () {
bb0(%0 : @guaranteed $CustomActor):
// CHECK:      bb0(%0 : @guaranteed $CustomActor):
// CHECK-NEXT:   [[WITNESS_METHOD:%.*]] = witness_method $CustomActor, #Actor.unownedExecutor!getter
// CHECK-NEXT:   [[WRAPPED_EXECUTOR:%.*]] = apply [[WITNESS_METHOD]]<CustomActor>(%0)
// CHECK-NEXT:   [[EXECUTOR:%.*]] = struct_extract [[WRAPPED_EXECUTOR]] : $UnownedSerialExecutor, #UnownedSerialExecutor.executor
// CHECK-NEXT:   [[DEPEND:%.*]] = mark_dependence [[EXECUTOR]] : $Builtin.Executor on %0 : $CustomActor
// CHECK-NEXT:   [[SOME:%.*]] = enum $Optional<Builtin.Executor>, #Optional.some!enumelt, [[DEPEND]] : $Builtin.Executor
// CHECK-NEXT:   hop_to_executor [[SOME]] : $Optional<Builtin.Executor>
// CHECK-NEXT:   [[RET:%.*]] = tuple ()
// CHECK-NEXT:   return [[RET]] : $()
  hop_to_executor %0 : $CustomActor
  %r = tuple ()
  return %r : $()
}
