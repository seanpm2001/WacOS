// RUN: %target-sil-opt -copy-propagation -enable-sil-verify-all %s | %FileCheck %s

import Builtin
import Swift

// =============================================================================
// = DECLARATIONS                                                             {{
// =============================================================================

class C {
    weak var d: D?
}
class D {}
class DBox {
  var d: D
}

struct CDCase {
    var c: C
    var d: D
}

class PointedTo {
}
class PointerWrapper {
    var pointer: Builtin.RawPointer
}

enum OneOfThree { case one, two, three }

sil [ossa] @callee_guaranteed: $@convention(thin) (@guaranteed C) -> ()
sil [ossa] @callee_owned : $@convention(thin) (@owned C) -> ()
sil [ossa] @callee_optional_d_guaranteed: $@convention(thin) (@guaranteed Optional<D>) -> ()
sil [ossa] @synchronization_point : $@convention(thin) () -> ()

// =============================================================================
// = DECLARATIONS                                                             }}
// =============================================================================

// =============================================================================
// branching tests                                                            {{
// =============================================================================

// Hoist over br.
// CHECK-LABEL: sil [ossa] @hoist_over_branch_1 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[CALLEE_GUARANTEED:%[^,]+]] = function_ref @callee_guaranteed
// CHECK:         {{%[^,]+}} = apply [[CALLEE_GUARANTEED]]([[INSTANCE]])
// CHECK:         br [[EXIT:bb[0-9]+]]
// CHECK:       [[EXIT]]:
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_branch_1'
sil [ossa] @hoist_over_branch_1 : $@convention(thin) (@owned C) -> @owned C {
entry(%instance: @owned $C):
    %lifetime = begin_borrow %instance : $C
    %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
    %_ = apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
    br bl1
bl1:
    end_borrow %lifetime : $C
    return %instance : $C
}

// Hoist over cond_br.
// CHECK-LABEL: sil [ossa] @hoist_over_branch_2 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[CALLEE_GUARANTEED:%[^,]+]] = function_ref @callee_guaranteed
// CHECK:         {{%[^,]+}} = apply [[CALLEE_GUARANTEED]]([[INSTANCE]])
// CHECK:         cond_br undef, [[BL1:bb[0-9]+]], [[BL2:bb[0-9]+]]
// CHECK:       [[BL1]]:
// CHECK:         br [[EXIT:bb[0-9]+]]
// CHECK:       [[BL2]]:
// CHECK:         br [[EXIT]]
// CHECK:       [[EXIT]]:
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_branch_2'
sil [ossa] @hoist_over_branch_2 : $@convention(thin) (@owned C) -> @owned C {
entry(%instance: @owned $C):
    %lifetime = begin_borrow %instance : $C
    %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
    %_ = apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
    cond_br undef, bl1, bl2
bl1:
    end_borrow %lifetime : $C
    br exit
bl2:
    end_borrow %lifetime : $C
    br exit
exit:
    return %instance : $C
}

// Hoist over two brs.
// CHECK-LABEL: sil [ossa] @hoist_over_branch_3 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[CALLEE_GUARANTEED:%[^,]+]] = function_ref @callee_guaranteed
// CHECK:         {{%[^,]+}} = apply [[CALLEE_GUARANTEED]]([[INSTANCE]])
// CHECK:         cond_br undef, [[BL1:bb[0-9]+]], [[BL2:bb[0-9]+]]
// CHECK:       [[BL1]]:
// CHECK:         br [[EXIT:bb[0-9]+]]
// CHECK:       [[BL2]]:
// CHECK:         br [[EXIT]]
// CHECK:       [[EXIT]]:
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_branch_3'
sil [ossa] @hoist_over_branch_3 : $@convention(thin) (@owned C) -> @owned C {
entry(%instance: @owned $C):
    %lifetime = begin_borrow %instance : $C
    %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
    %_ = apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
    cond_br undef, bl1, bl2
bl1:
    br exit
bl2:
    br exit
exit:
    end_borrow %lifetime : $C
    return %instance : $C
}

// Don't hoist over 1 / 2 brs.
// CHECK-LABEL: sil [ossa] @hoist_over_branch_4 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         cond_br undef, [[BL1:bb[0-9]+]], [[BL2:bb[0-9]+]]
// CHECK:       [[BL1]]:
// CHECK:         [[CALLEE_GUARANTEED:%[^,]+]] = function_ref @callee_guaranteed
// CHECK:         {{%[^,]+}} = apply [[CALLEE_GUARANTEED]]([[INSTANCE]])
// CHECK:         br [[EXIT:bb[0-9]+]]
// CHECK:       [[BL2]]:
// CHECK:         br [[EXIT]]
// CHECK:       [[EXIT]]:
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_branch_4'
sil [ossa] @hoist_over_branch_4 : $@convention(thin) (@owned C) -> @owned C {
entry(%instance: @owned $C):
    %lifetime = begin_borrow %instance : $C
    cond_br undef, bl1, bl2
bl1:
    %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
    %_ = apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
    br exit
bl2:
    br exit
exit:
    end_borrow %lifetime : $C
    return %instance : $C
}

// Hoist over switch_enum destinations.
// CHECK-LABEL: sil [ossa] @hoist_over_branch_5 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C, [[CASE:%[^,]+]] : $OneOfThree):
// CHECK:         [[CALLEE_GUARANTEED:%[^,]+]] = function_ref @callee_guaranteed
// CHECK:         {{%[0-9]+}} = apply [[CALLEE_GUARANTEED]]([[INSTANCE]])
// CHECK:         switch_enum [[CASE]] : $OneOfThree, case #OneOfThree.one!enumelt: [[ONE_DEST:bb[0-9]+]], case #OneOfThree.two!enumelt: [[TWO_DEST:bb[0-9]+]], case #OneOfThree.three!enumelt: [[THREE_DEST:bb[0-9]+]]
// CHECK:       [[ONE_DEST]]:
// CHECK:         br [[EXIT:bb[0-9]+]]
// CHECK:       [[TWO_DEST]]:
// CHECK:         br [[EXIT]]
// CHECK:       [[THREE_DEST]]:
// CHECK:         br [[EXIT]]
// CHECK:       [[EXIT]]:
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_branch_5'
sil [ossa] @hoist_over_branch_5 : $(@owned C, OneOfThree) -> @owned C {
entry(%instance: @owned $C, %case : $OneOfThree):
    %lifetime = begin_borrow %instance : $C
    %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
    %_ = apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
    switch_enum %case : $OneOfThree, case #OneOfThree.one!enumelt: one_dest, case #OneOfThree.two!enumelt: two_dest, case #OneOfThree.three!enumelt: three_dest
one_dest:
    br exit
two_dest:
    br exit
three_dest:
    br exit
exit:
    end_borrow %lifetime : $C
    return %instance : $C
}

// Don't hoist over transformation terminator which forwards ownership of 
// borrowed value.
// CHECK-LABEL: sil [ossa] @hoist_over_terminator_1 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $Optional<C>):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]]
// CHECK:         switch_enum [[LIFETIME]] : $Optional<C>, case #Optional.some!enumelt: [[SOME_DEST:bb[0-9]+]], case #Optional.none!enumelt: [[NONE_DEST:bb[0-9]+]]
// CHECK:       [[SOME_DEST]]([[LIFETIME_2:%[^,]+]] : @guaranteed $C):
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         br [[EXIT:bb[0-9]+]]
// CHECK:       [[NONE_DEST]]:
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         br [[EXIT]]
// CHECK:       [[EXIT]]:
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_terminator_1'
sil [ossa] @hoist_over_terminator_1 : $@convention(thin) (@owned Optional<C>) -> @owned Optional<C> {
entry(%instance_c : @owned $Optional<C>):
    %lifetime_c = begin_borrow %instance_c : $Optional<C>
    switch_enum %lifetime_c : $Optional<C>, case #Optional.some!enumelt: some_dest, case #Optional.none!enumelt: none_dest

some_dest(%lifetime_c_2 : @guaranteed $C):
    br exit

none_dest:
    br exit

exit:
    end_borrow %lifetime_c : $Optional<C>
    return %instance_c : $Optional<C>
}

// Hoist over brs but don't hoist over transformation terminator which forwards
// ownership of guaranteed value which itself had forwarding ownership of the
// original borrow.
// CHECK-LABEL: sil [ossa] @hoist_over_terminator_2 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]]
// CHECK:         [[MAYBE:%[^,]+]] = enum $Optional<C>, #Optional.some!enumelt, [[LIFETIME]]
// CHECK:         switch_enum [[MAYBE]] : $Optional<C>, case #Optional.some!enumelt: [[SOME_DEST:bb[0-9]+]], case #Optional.none!enumelt: [[NONE_DEST:bb[0-9]+]] 
// CHECK:       [[SOME_DEST]]([[LIFETIME_2:%[^,]+]] : @guaranteed $C):
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         br [[BASIC_BLOCK3:bb[0-9]+]]
// CHECK:       [[NONE_DEST]]:
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         br [[BASIC_BLOCK3]]
// CHECK:       [[BASIC_BLOCK3]]:
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_terminator_2'
sil [ossa] @hoist_over_terminator_2 : $@convention(thin) (@owned C) -> @owned C {
entry(%instance_c : @owned $C):
    %lifetime_c = begin_borrow %instance_c : $C
    %maybe_c = enum $Optional<C>, #Optional.some!enumelt, %lifetime_c : $C
    switch_enum %maybe_c : $Optional<C>, case #Optional.some!enumelt: some_dest, case #Optional.none!enumelt: none_dest

some_dest(%lifetime_c_2 : @guaranteed $C):
    br exit

none_dest:
    br exit

exit:
    end_borrow %lifetime_c : $C
    return %instance_c : $C
}

// Hoist over transformation terminator which forwards ownership of guaranteed
// value which itself had forwarding ownership of the original borrow.
// CHECK-LABEL: sil [ossa] @hoist_over_terminator_3 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]]
// CHECK:         [[MAYBE:%[^,]+]] = enum $Optional<C>, #Optional.some!enumelt, [[LIFETIME]]
// CHECK:         switch_enum [[MAYBE]] : $Optional<C>, case #Optional.some!enumelt: [[SOME_DEST:bb[0-9]+]], case #Optional.none!enumelt: [[NONE_DEST:bb[0-9]+]] 
// CHECK:       [[SOME_DEST]]([[LIFETIME_2:%[^,]+]] : @guaranteed $C):
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         br [[EXIT:bb[0-9]+]]
// CHECK:       [[NONE_DEST]]:
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         br [[EXIT]]
// CHECK:       [[EXIT]]:
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_terminator_3'
sil [ossa] @hoist_over_terminator_3 : $@convention(thin) (@owned C) -> @owned C {
entry(%instance_c : @owned $C):
    %lifetime_c = begin_borrow %instance_c : $C
    %maybe_c = enum $Optional<C>, #Optional.some!enumelt, %lifetime_c : $C
    switch_enum %maybe_c : $Optional<C>, case #Optional.some!enumelt: some_dest, case #Optional.none!enumelt: none_dest

some_dest(%lifetime_c_2 : @guaranteed $C):
    end_borrow %lifetime_c : $C
    br exit

none_dest:
    end_borrow %lifetime_c : $C
    br exit

exit:
    return %instance_c : $C
}

// Don't hoist over terminator that reborrows.
// CHECK-LABEL: sil [ossa] @hoist_over_terminator_4 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]]
// CHECK:         br [[WORK:bb[0-9]+]]([[LIFETIME]] : $C)
// CHECK:       [[WORK]]([[LIFETIME_2:%[^,]+]] : @guaranteed $C):
// CHECK:         cond_br undef, [[LEFT:bb[0-9]+]], [[RIGHT:bb[0-9]+]]
// CHECK:       [[LEFT]]:
// CHECK:         end_borrow [[LIFETIME_2]]
// CHECK:         br [[EXIT:bb[0-9]+]]
// CHECK:       [[RIGHT]]:
// CHECK:         end_borrow [[LIFETIME_2]]
// CHECK:         br [[EXIT]]
// CHECK:       [[EXIT]]:
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_terminator_4'
sil [ossa] @hoist_over_terminator_4 : $@convention(thin) (@owned C) -> @owned C {
entry(%instance_c : @owned $C):
    %lifetime_c_0 = begin_borrow %instance_c : $C
    br work(%lifetime_c_0 : $C)

work(%lifetime_c : @guaranteed $C):
    cond_br undef, left, right

left:
    end_borrow %lifetime_c : $C
    br exit

right:
    end_borrow %lifetime_c : $C
    br exit

exit:
    return %instance_c : $C
}

// CHECK-LABEL: sil [ossa] @dont_hoist_over_some_barred_blocks : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]] : $C
// CHECK:         cond_br undef, [[LEFT:bb[0-9]+]], [[RIGHT:bb[0-9]+]]
// CHECK:       [[LEFT]]:
// CHECK:         br [[EXIT:bb[0-9]+]](undef : $C)
// CHECK:       [[RIGHT]]:
// CHECK:         [[COPY:%[^,]+]] = copy_value [[LIFETIME]] : $C
// CHECK:         br [[EXIT]]([[COPY]] : $C)
// CHECK:       [[EXIT]]
// CHECK:           end_borrow [[LIFETIME]] : $C
// CHECK-LABEL: } // end sil function 'dont_hoist_over_some_barred_blocks'
sil [ossa] @dont_hoist_over_some_barred_blocks : $(@owned C) -> () {
entry(%instance : @owned $C):
    %borrow = begin_borrow %instance : $C
    cond_br undef, left, right

left:
    br exit(undef : $C)

right:
    %copy = copy_value %borrow : $C
    br exit(%copy : $C)

exit(%thing : @owned $C):
    end_borrow %borrow : $C
    destroy_value %thing : $C
    destroy_value %instance : $C
    %retval = tuple ()
    return %retval : $()
}

// =============================================================================
// branching tests                                                            }}
// =============================================================================

// =============================================================================
// loop tests                                                                 {{
// =============================================================================

// Don't hoist over loop without uses.
// TODO: Eventually, we should hoist over such loops.
// CHECK-LABEL: sil [ossa] @hoist_over_loop_1 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]]
// CHECK:         [[CALLEE_GUARANTEED:%[^,]+]] = function_ref @callee_guaranteed
// CHECK:         {{%[^,]+}} = apply [[CALLEE_GUARANTEED]]([[LIFETIME]])
// CHECK:         br [[LOOP_HEADER:bb[0-9]+]]
// CHECK:       [[LOOP_HEADER]]:
// CHECK:         br [[LOOP_BODY:bb[0-9]+]]
// CHECK:       [[LOOP_BODY]]:
// CHECK:         br [[LOOP_LATCH:bb[0-9]+]]
// CHECK:       [[LOOP_LATCH]]:
// CHECK:         cond_br undef, [[EXIT:bb[0-9]+]], [[LOOP_BACKEDGE:bb[0-9]+]]
// CHECK:       [[LOOP_BACKEDGE]]:
// CHECK:         br [[LOOP_HEADER]]
// CHECK:       [[EXIT]]:
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_loop_1'
sil [ossa] @hoist_over_loop_1 : $@convention(thin) (@owned C) -> @owned C {
entry(%instance: @owned $C):
    %lifetime = begin_borrow %instance : $C
    %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
    %_ = apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
    br loop_header
loop_header:
    br loop_body
loop_body:
    br loop_latch
loop_latch:
    cond_br undef, exit, loop_backedge
loop_backedge:
    br loop_header
exit:
    end_borrow %lifetime : $C
    return %instance : $C
}

// Don't hoist over loop with uses.
// CHECK-LABEL: sil [ossa] @hoist_over_loop_2 : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]]
// CHECK:         br [[LOOP_HEADER:bb[0-9]+]]
// CHECK:       [[LOOP_HEADER]]:
// CHECK:         br [[LOOP_BODY:bb[0-9]+]]
// CHECK:       [[LOOP_BODY]]:
// CHECK:         [[CALLEE_GUARANTEED:%[^,]+]] = function_ref @callee_guaranteed
// CHECK:         {{%[^,]+}} = apply [[CALLEE_GUARANTEED]]([[LIFETIME]])
// CHECK:         br [[LOOP_LATCH:bb[0-9]+]]
// CHECK:       [[LOOP_LATCH]]:
// CHECK:         cond_br undef, [[EXIT:bb[0-9]+]], [[LOOP_BACKEDGE:bb[0-9]+]]
// CHECK:       [[LOOP_BACKEDGE]]:
// CHECK:         br [[LOOP_HEADER]]
// CHECK:       [[EXIT]]:
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         return [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_loop_2'
sil [ossa] @hoist_over_loop_2 : $@convention(thin) (@owned C) -> @owned C {
entry(%instance: @owned $C):
    %lifetime = begin_borrow %instance : $C
    br loop_header
loop_header:
    br loop_body
loop_body:
    %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
    %_ = apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
    br loop_latch
loop_latch:
    cond_br undef, exit, loop_backedge
loop_backedge:
    br loop_header
exit:
    end_borrow %lifetime : $C
    return %instance : $C
}

// =============================================================================
// loop tests                                                                 }}
// =============================================================================

// =============================================================================
// instruction tests                                                          {{
// =============================================================================

// Don't hoist over struct of begin_borrow'd value.
// CHECK-LABEL: sil [ossa] @hoist_over_struct : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE_C:%[^,]+]] : @owned $C, [[INSTANCE_D:%[^,]+]] : @owned $D):
// CHECK:         [[LIFETIME_C:%[^,]+]] = begin_borrow [[INSTANCE_C]]
// CHECK:         [[COPY_C:%[^,]+]] = copy_value [[LIFETIME_C]]
// CHECK:         [[LIFETIME_D:%[^,]+]] = begin_borrow [[INSTANCE_D]]
// CHECK:         [[REGISTER_4:%[^,]+]] = struct $CDCase ([[LIFETIME_C]] : $C, [[LIFETIME_D]] : $D)
// CHECK:         end_borrow [[LIFETIME_C]]
// CHECK:         end_borrow [[LIFETIME_D]]
// CHECK:         destroy_value [[INSTANCE_D]]
// CHECK:         return [[COPY_C]]
// CHECK-LABEL: } // end sil function 'hoist_over_struct'
sil [ossa] @hoist_over_struct : $@convention(thin) (@owned C, @owned D) -> @owned C {
entry(%instance_c: @owned $C, %instance_d: @owned $D):
    %lifetime_c = begin_borrow %instance_c : $C
    %copy_c = copy_value %lifetime_c : $C
    %lifetime_d = begin_borrow %instance_d : $D
    %copy_d = copy_value %lifetime_d : $D

    %struct = struct $CDCase (%lifetime_c : $C, %lifetime_d : $D)
    end_borrow %lifetime_d : $D

    destroy_value %copy_d : $D
    destroy_value %instance_d : $D
    end_borrow %lifetime_c : $C
    destroy_value %instance_c : $C
    return %copy_c : $C
}

// Don't hoist over store_weak into a field of the object being borrowed.
// CHECK-LABEL: sil [ossa] @hoist_over_store_weak_1 : {{.*}} {
// CHECK:         store_weak
// CHECK:         end_borrow
// CHECK-LABEL: } // end sil function 'hoist_over_store_weak_1'
sil [ossa] @hoist_over_store_weak_1 : $@convention(thin) (@owned C, @owned D) -> @owned C {
entry(%instance_c: @owned $C, %instance_d: @owned $D):
    %lifetime_c = begin_borrow %instance_c : $C
    %lifetime_d = begin_borrow %instance_d : $D
    %copy_d = copy_value %lifetime_d : $D
    %optional_d = enum $Optional<D>, #Optional.some!enumelt, %copy_d : $D
    %c_d_addr = ref_element_addr %lifetime_c : $C, #C.d
    %c_d_access = begin_access [modify] [dynamic] %c_d_addr : $*@sil_weak Optional<D>

    store_weak %optional_d to %c_d_access : $*@sil_weak Optional<D>
    end_borrow %lifetime_d : $D

    end_access %c_d_access : $*@sil_weak Optional<D>
    destroy_value %optional_d : $Optional<D>
    destroy_value %instance_d : $D
    end_borrow %lifetime_c : $C
    return %instance_c : $C
}

// Don't hoist over store to an address which itself is (earlier) stored into a
// field of the object being borrowed.
// TODO: Eventually, we should be able to hoist over such a store.
// CHECK-LABEL: sil [ossa] @hoist_over_load : $@convention(thin) () -> () {
// CHECK:        [[D:%[^,]+]] = alloc_ref $PointerWrapper                  
// CHECK:        [[LIFETIME:%[^,]+]] = begin_borrow [[D]] : $PointerWrapper          
// CHECK:        [[ADDR:%[^,]+]] = alloc_stack $PointedTo                     
// CHECK:        [[C:%[^,]+]] = alloc_ref $PointedTo                       
// CHECK:        store [[C]] to [init] [[ADDR]] : $*PointedTo             
// CHECK-NEXT:    end_borrow [[LIFETIME]] : $PointerWrapper                 
// CHECK-LABEL: } // end sil function 'hoist_over_load'
sil [ossa] @hoist_over_load : $@convention(thin) () -> () {
bb0:
  %d = alloc_ref $PointerWrapper
  %lifetime = begin_borrow %d : $PointerWrapper
  %addr = alloc_stack $PointedTo
  %ptr = address_to_pointer %addr : $*PointedTo to $Builtin.RawPointer
  %field = ref_element_addr %lifetime : $PointerWrapper, #PointerWrapper.pointer

  store %ptr to [trivial] %field : $*Builtin.RawPointer

  %c = alloc_ref $PointedTo

  store %c to [init] %addr : $*PointedTo
  end_borrow %lifetime : $PointerWrapper

  destroy_value %d : $PointerWrapper

  destroy_addr %addr : $*PointedTo
  dealloc_stack %addr : $*PointedTo

  %33 = tuple ()
  return %33 : $()
}

// Don't hoist over load_weak.
// There is an ordering guarantee between a load_weak of an weak reference that 
// subsequently is zeroed by a deinit; if the load_weak originally happens
// before the deinit that would deinit the weakly referenced object, it must 
// always remain first.
// CHECK-LABEL: sil [ossa] @dont_hoist_over_load_weak : {{.*}} {
// CHECK:         load_weak
// CHECK:         end_borrow
// CHECK-LABEL: } // end sil function 'dont_hoist_over_load_weak'
sil [ossa] @dont_hoist_over_load_weak : $@convention(thin) (@owned DBox) -> () {
entry(%instance : @owned $DBox):
  %lifetime = begin_borrow [lexical] %instance : $DBox
  debug_value %lifetime : $DBox, let, name "dbox"
  %addr = alloc_stack [lexical] $@sil_weak Optional<D>
  %d_addr = ref_element_addr %lifetime : $DBox, #DBox.d
  %d = load [copy] %d_addr : $*D
  %some_d = enum $Optional<D>, #Optional.some!enumelt, %d : $D
  store_weak %some_d to [initialization] %addr : $*@sil_weak Optional<D>
  destroy_value %some_d : $Optional<D>

  %loaded = load_weak %addr : $*@sil_weak Optional<D>
  end_borrow %lifetime : $DBox

  destroy_value %instance : $DBox

  destroy_value %loaded : $Optional<D>
  destroy_addr %addr : $*@sil_weak Optional<D>
  dealloc_stack %addr : $*@sil_weak Optional<D>
  %retval = tuple ()
  return %retval : $()
}

// Don't hoist over load.
// There is an ordering guarantee between a load of an address the storage of
// which is subsequently deallocated by a deinit; if the load originally happens
// before the deinit that would dealocated the pointed-to object, it must always
// remain first.

// Hoist over and rewrite copy of borrow.
//
// Everything in this test case except the copy_value and end_borrow is here in
// order to obstruct other optimizations from kicking in that obfuscate that the
// fact that the end_borrow was hoisted over the copy_value.
// CHECK-LABEL: sil [ossa] @hoist_over_copy_of_borrow : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @guaranteed $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [lexical] [[INSTANCE]]
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         {{%[^,]+}} = copy_value [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'hoist_over_copy_of_borrow'
sil [ossa] @hoist_over_copy_of_borrow : $@convention(thin) (@guaranteed C) -> () {
entry(%instance : @guaranteed $C):
  %lifetime = begin_borrow [lexical] %instance : $C
  %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
  %_ = apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
  %synchronization_point = function_ref @synchronization_point : $@convention(thin) () -> ()
  %synchronized = apply %synchronization_point() : $@convention(thin) () -> ()
  %copy = copy_value %instance : $C
  end_borrow %lifetime : $C
  %callee_owned = function_ref @callee_owned : $@convention(thin) (@owned C) -> ()
  %2 = apply %callee_owned(%copy) : $@convention(thin) (@owned C) -> ()
  %result = tuple ()
  return %result : $()
}

// Hoist over an apply that uses a copy of the borrow.
// CHECK-LABEL: sil [ossa] @hoist_over_apply_at_copy : {{.*}} {
// CHECK-NOT:     copy_value
// CHECK-LABEL: // end sil function 'hoist_over_apply_at_copy'
sil [ossa] @hoist_over_apply_at_copy : $@convention(thin) (@owned C) -> () {
entry(%instance : @owned $C):
  %synchronization_point = function_ref @synchronization_point : $@convention(thin) () -> ()
  %callee_owned = function_ref @callee_owned : $@convention(thin) (@owned C) -> ()
  %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
  %lifetime = begin_borrow %instance : $C
  %copy = copy_value %lifetime : $C
  %1 = apply %callee_guaranteed(%copy) : $@convention(thin) (@guaranteed C) -> ()
  %synchronized = apply %synchronization_point() : $@convention(thin) () -> ()
  %2 = apply %callee_guaranteed(%copy) : $@convention(thin) (@guaranteed C) -> ()
  end_borrow %lifetime : $C
  destroy_value %instance : $C
  destroy_value %copy : $C

  %result = tuple ()
  return %result : $()
}

// Hoist over an apply that uses the borrow.
// CHECK-LABEL: sil [ossa] @hoist_over_apply_at_borrow : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]]
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         apply {{%[^,]+}}([[INSTANCE]])
// CHECK-LABEL: // end sil function 'hoist_over_apply_at_borrow'
sil [ossa] @hoist_over_apply_at_borrow : $@convention(thin) (@owned C) -> () {
entry(%instance : @owned $C):
  %lifetime = begin_borrow %instance : $C
  %copy = copy_value %lifetime : $C
  %callee_owned = function_ref @callee_owned : $@convention(thin) (@owned C) -> ()
  %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
  %1 = apply %callee_owned(%copy) : $@convention(thin) (@owned C) -> ()
  %synchronization_point = function_ref @synchronization_point : $@convention(thin) () -> ()
  %synchronized = apply %synchronization_point() : $@convention(thin) () -> ()
  %2 = apply %callee_guaranteed(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
  end_borrow %lifetime : $C
  destroy_value %instance : $C

  %result = tuple ()
  return %result : $()
}

// Hoist over a begin_borrow of a copy_value of the original begin_borrow.
//
// Most of the test's contents are just to obstruct optimization.
// CHECK-LABEL: sil [ossa] @hoist_over_borrow_of_copy : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]]
// CHECK:         [[COPY:%[^,]+]] = copy_value [[LIFETIME]]
// CHECK:         end_borrow [[LIFETIME]]
// CHECK:         begin_borrow [[COPY]]
// CHECK-LABEL: // end sil function 'hoist_over_borrow_of_copy'
sil [ossa] @hoist_over_borrow_of_copy : $@convention(thin) (@owned C) -> () {
entry(%instance : @owned $C):
  %lifetime_1 = begin_borrow %instance : $C
  %copy_1 = copy_value %lifetime_1 : $C
  %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
  %1 = apply %callee_guaranteed(%copy_1) : $@convention(thin) (@guaranteed C) -> ()
  %synchronization_point = function_ref @synchronization_point : $@convention(thin) () -> ()
  %synchronized = apply %synchronization_point() : $@convention(thin) () -> ()
  %lifetime_2 = begin_borrow %copy_1 : $C
  end_borrow %lifetime_1 : $C
  %copy_2 = copy_value %lifetime_2 : $C
  %2 = apply %callee_guaranteed(%copy_2) : $@convention(thin) (@guaranteed C) -> ()
  %synchronized2 = apply %synchronization_point() : $@convention(thin) () -> ()
  end_borrow %lifetime_2 : $C
  destroy_value %copy_1 : $C
  destroy_value %copy_2 : $C
  destroy_value %instance : $C

  %result = tuple ()
  return %result : $()
}

// Hoist over copy_value of %copy, a copy_value of %borrow.
// CHECK-LABEL: sil [ossa] @hoist_over_copy_of_copy : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK:         [[LIFETIME:%[^,]+]] = begin_borrow [[INSTANCE]] : $C
// CHECK:         [[COPY_1:%[^,]+]] = copy_value [[LIFETIME]] : $C
// CHECK:         end_borrow [[LIFETIME]] : $C
// CHECK:         copy_value [[INSTANCE]] : $C
// CHECK-LABEL: } // end sil function 'hoist_over_copy_of_copy'
sil [ossa] @hoist_over_copy_of_copy : $@convention(thin) (@owned C) -> () {
entry(%instance : @owned $C):
  %synchronization_point = function_ref @synchronization_point : $@convention(thin) () -> ()
  %callee_guaranteed = function_ref @callee_guaranteed : $@convention(thin) (@guaranteed C) -> ()
  %callee_owned = function_ref @callee_owned : $@convention(thin) (@owned C) -> ()
  %lifetime_1 = begin_borrow %instance : $C
  %copy_1 = copy_value %lifetime_1 : $C
  %_ = apply %callee_guaranteed(%lifetime_1) : $@convention(thin) (@guaranteed C) -> ()
  %synchronized = apply %synchronization_point() : $@convention(thin) () -> ()
  %copy_2 = copy_value %copy_1 : $C
  end_borrow %lifetime_1 : $C
  %0 = apply %callee_owned(%instance) : $@convention(thin) (@owned C) -> ()
  %1 = apply %callee_owned(%copy_1) : $@convention(thin) (@owned C) -> ()
  %2 = apply %callee_owned(%copy_2) : $@convention(thin) (@owned C) -> ()

  %result = tuple ()
  return %result : $()
}

// CHECK-LABEL: sil [ossa] @hoist_over_try_apply_at_borrow : {{.*}} {
// CHECK:       {{bb[0-9]+}}([[INSTANCE:%[^,]+]] : @owned $C):
// CHECK-NEXT:    try_apply undef([[INSTANCE]]) : $@convention(thin) (@guaranteed C) -> @error Error, normal bb1, error bb2 
// CHECK-LABEL: } // end sil function 'hoist_over_try_apply_at_borrow'
sil [ossa] @hoist_over_try_apply_at_borrow : $@convention(thin) (@owned C) -> @error Error {
bb0(%instance : @owned $C):
  %lifetime = begin_borrow %instance : $C
  try_apply undef(%lifetime) : $@convention(thin) (@guaranteed C) -> @error Error, normal good, error bad

good(%8 : $()):
  end_borrow %lifetime : $C
  destroy_value %instance : $C
  %13 = tuple ()
  return %13 : $()

bad(%15 : @owned $Error):
  end_borrow %lifetime : $C
  destroy_value %instance : $C
  throw %15 : $Error
}

// =============================================================================
// instruction tests                                                          }}
// =============================================================================
