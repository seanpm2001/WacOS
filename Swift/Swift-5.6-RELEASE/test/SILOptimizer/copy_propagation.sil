// RUN: %target-sil-opt -copy-propagation -canonical-ossa-rewrite-borrows -enable-sil-verify-all %s | %FileCheck %s --check-prefixes=CHECK,CHECK-OPT
// RUN: %target-sil-opt -mandatory-copy-propagation -canonical-ossa-rewrite-borrows -enable-sil-verify-all %s | %FileCheck %s --check-prefixes=CHECK,CHECK-ONONE

// REQUIRES: asserts

// Most CopyPropagation tests are still in copy_propagation_opaque.sil.

// Ideally, the -mandatory-copy-propagation line above would write to
// %.sil then both be piped to CHECK-ONONE and used as the input for an
// optimized round-trip. It's important to ensure that importing
// -Onone code into a -O pipeline does not impair optimization. This
// doesn't work yet because mandatory copy-propatation handles all
// defs (not just copied ones). This could be fixed with an internal
// option. We would also need a way to strip the [poison] from
// destroys that aren't regenerated, otherwise the check lines
// won't match:
//   %target-sil-opt -copy-propagation -canonical-ossa-rewrite-borrows -enable-sil-verify-all %t.sil | %FileCheck %s --check-prefixes=CHECK,CHECK-OPT

sil_stage canonical

import Builtin
import Swift

class B { }

class C {
  var a: Builtin.Int64
}

sil [ossa] @dummy : $@convention(thin) () -> ()
sil [ossa] @getOwnedC : $@convention(thin) () -> (@owned C)
sil [ossa] @takeOwnedC : $@convention(thin) (@owned C) -> ()
sil [ossa] @takeOwnedCTwice : $@convention(thin) (@owned C, @owned C) -> ()
sil [ossa] @takeGuaranteedC : $@convention(thin) (@guaranteed C) -> ()
sil [ossa] @takeGuaranteedAnyObject : $@convention(thin) (@guaranteed AnyObject) -> ()

// -O ignores this because there's no copy_value
// -Onone hoists the destroy and adds a poison flag.
//
// CHECK-LABEL: sil [ossa] @testDestroyAfterCall : $@convention(thin) (@owned B) -> () {
// CHECK: bb0(%0 : @owned $B):
// CHECK-ONONE:   destroy_value [poison] %0 : $B
// CHECK:   apply
// CHECK-OPT:   destroy_value %0 : $B
// CHECK-LABEL: } // end sil function 'testDestroyAfterCall'
sil [ossa] @testDestroyAfterCall : $@convention(thin) (@owned B) -> () {
bb0(%arg : @owned $B):
  %f = function_ref @dummy : $@convention(thin) () -> ()
  %call = apply %f() : $@convention(thin) () -> ()
  destroy_value %arg : $B
  %10 = tuple ()
  return %10 : $()
}

// -O removes the copy/destroy
// -Onone requres a destroy at the lifetime end. It reuses the
// existing one without adding poison.
//
// CHECK-LABEL: sil [ossa] @testDestroyAfterConsumingStore : $@convention(thin) (@owned C) -> () {
// CHECK: bb0(%0 : @owned $C):
// CHECK: [[ADR:%.*]] = alloc_stack $C
// CHECK-OPT-NOT: copy_value
// CHECK-OPT: store %0 to [init] [[ADR]] : $*C
// CHECK-ONONE: [[CP:%.*]] = copy_value %0 : $C
// CHECK-ONONE: store [[CP]] to [init] [[ADR]] : $*C
// CHECK-OPT-NOT: destroy_value
// CHECK-ONONE: destroy_value %0 : $C
// CHECK: destroy_addr
// CHECK-LABEL: } // end sil function 'testDestroyAfterConsumingStore'
sil [ossa] @testDestroyAfterConsumingStore : $@convention(thin) (@owned C) -> () {
bb0(%arg : @owned $C):
  %adr = alloc_stack $C
  %copy = copy_value %arg : $C
  store %copy to [init] %adr : $*C
  destroy_value %arg : $C
  destroy_addr %adr : $*C
  dealloc_stack %adr : $*C
  %10 = tuple ()
  return %10 : $()
}

// -O removes the copy/destroy
// -Onone requres a destroy at the lifetime end. It creates a new poison one.
//
// CHECK-LABEL: sil [ossa] @testDestroyAfterConsumingStoreAndCall : $@convention(thin) (@owned C) -> () {
// CHECK: bb0(%0 : @owned $C):
// CHECK: [[ADR:%.*]] = alloc_stack $C
// CHECK-OPT-NOT: copy_value
// CHECK-ONONE: copy_value %0 : $C
// CHECK: store %{{.*}} to [init] [[ADR]] : $*C
// CHECK-OPT-NOT: destroy_value
// CHECK-ONONE: destroy_value [poison] %0 : $C
// CHECK: apply
// CHECK: destroy_addr
// CHECK-LABEL: } // end sil function 'testDestroyAfterConsumingStoreAndCall'
sil [ossa] @testDestroyAfterConsumingStoreAndCall : $@convention(thin) (@owned C) -> () {
bb0(%arg : @owned $C):
  %adr = alloc_stack $C
  %copy = copy_value %arg : $C
  store %copy to [init] %adr : $*C
  %f = function_ref @dummy : $@convention(thin) () -> ()
  %call = apply %f() : $@convention(thin) () -> ()
  destroy_value %arg : $C
  destroy_addr %adr : $*C
  dealloc_stack %adr : $*C
  %10 = tuple ()
  return %10 : $()
}

// -O removes the copy/destroy
// -Onone reuses the existint lifetime-ending destroy.
//
// CHECK-LABEL: sil [ossa] @testDestroyAfterConsumingCall : $@convention(thin) (@owned C) -> () {
// CHECK: bb0(%0 : @owned $C):
// CHECK-OPT-NOT: copy_value
// CHECK-ONONE:   %1 = copy_value %0 : $C
// CHECK: apply {{.*}} : $@convention(thin) (@owned C) -> ()
// CHECK-OPT-NOT: destroy_value
// CHECK-ONONE:   destroy_value %0 : $C
// CHECK-LABEL: } // end sil function 'testDestroyAfterConsumingCall'
sil [ossa] @testDestroyAfterConsumingCall : $@convention(thin) (@owned C) -> () {
bb0(%arg : @owned $C):
  %copy = copy_value %arg : $C
  %f = function_ref @takeOwnedC : $@convention(thin) (@owned C) -> ()
  %call = apply %f(%copy) : $@convention(thin) (@owned C) -> ()
  destroy_value %arg : $C
  %10 = tuple ()
  return %10 : $()
}

// -O removes the copy/destroy
// -Onone requres a destroy at the lifetime end. It creates a new poison one.
//
// CHECK-LABEL: sil [ossa] @testDestroyAfterConsumingCallAndCall : $@convention(thin) (@owned C) -> () {
// CHECK: bb0(%0 : @owned $C):
// CHECK-OPT-NOT: copy_value
// CHECK-ONONE: copy_value %0 : $C
// CHECK: apply %{{.*}}(%{{.*}}) : $@convention(thin) (@owned C) -> ()
// CHECK-OPT-NOT: destroy_value
// CHECK-ONONE:  destroy_value [poison] %0 : $C
// CHECK: apply
// CHECK-LABEL: } // end sil function 'testDestroyAfterConsumingCallAndCall'
sil [ossa] @testDestroyAfterConsumingCallAndCall : $@convention(thin) (@owned C) -> () {
bb0(%arg : @owned $C):
  %copy = copy_value %arg : $C
  %f1 = function_ref @takeOwnedC : $@convention(thin) (@owned C) -> ()
  %call1 = apply %f1(%copy) : $@convention(thin) (@owned C) -> ()
  %f2 = function_ref @dummy : $@convention(thin) () -> ()
  %call2 = apply %f2() : $@convention(thin) () -> ()
  destroy_value %arg : $C
  %10 = tuple ()
  return %10 : $()
}


// CHECK-LABEL: sil [ossa] @testPhi : $@convention(thin) () -> @owned C {
// CHECK:      bb0:
// CHECK:        [[C:%.*]] = apply %0() : $@convention(thin) () -> @owned C
// CHECK:        debug_value [[C]] : $C, let, name "Hello Tom"
// CHECK:        apply %{{.*}}([[C]]) : $@convention(thin) (@guaranteed C) -> ()
// CHECK:        cond_br undef, bb1, bb2
// CHECK:      bb1:
// CHECK-OPT-NOT: copy_value
// CHECK-OPT-NOT: destroy_value
// CHECK-OPT:     br bb3([[C]] : $C)
// CHECK-ONONE:  [[CP:%.*]] = copy_value [[C]] : $C
// CHECK-ONONE:  destroy_value [poison] [[C]] : $C
// CHECK-ONONE:  br bb3([[CP]] : $C)
// CHECK:      bb2:
// CHECK-OPT:    destroy_value %1 : $C
// CHECK-ONONE:  destroy_value [poison] %1 : $C
// CHECK:        apply %0() : $@convention(thin) () -> @owned C
// CHECK:        br bb3(
// CHECK:      bb3(%{{.*}} : @owned $C)
// CHECK-NEXT:   br bb4(%{{.*}} : $C)
// CHECK:      bb4(%{{.*}} : @owned $C):
// CHECK-NEXT:  return %{{.*}} : $C
// CHECK-LABEL: } // end sil function 'testPhi'
sil [ossa] @testPhi : $@convention(thin) () -> @owned C {
bb0:
  %f1 = function_ref @getOwnedC : $@convention(thin) () -> @owned C
  %s = apply %f1() : $@convention(thin) () -> @owned C
  debug_value %s : $C, let, name "Hello Tom"
  %f2 = function_ref @takeGuaranteedC : $@convention(thin) (@guaranteed C) -> ()
  %use = apply %f2(%s) : $@convention(thin) (@guaranteed C) -> ()
  cond_br undef, bb1, bb2

bb1:
  %cp = copy_value %s : $C
  br bb3(%cp : $C)

bb2:
  %s2 = apply %f1() : $@convention(thin) () -> @owned C
  br bb3(%s2 : $C)

bb3(%arg3 : @owned $C):
  destroy_value %s : $C
  br bb4(%arg3 : $C)

bb4(%arg4 : @owned $C):
  return %arg4 : $C
}

// -----------------------------------------------------------------------------
// Test begin/end_apply
// -----------------------------------------------------------------------------

struct Struct {
  var st: Int
}

sil @swift_modifyAtWritableKeyPath : $@yield_once @convention(thin) <τ_0_0, τ_0_1> (@inout τ_0_0, @guaranteed WritableKeyPath<τ_0_0, τ_0_1>) -> @yields @inout τ_0_1
sil @modifyInt : $@convention(thin) (@inout Int) -> ()

// CHECK-LABEL: sil hidden [ossa] @testBeginApply : $@convention(thin) (@inout Struct) -> () {
// CHECK: begin_apply
// CHECK-NOT: destroy
// CHECK: apply
// CHECK-NOT: destroy
// CHECK: end_apply
// CHECK-NOT: destroy
// CHECK-OPT: destroy_value %{{.*}} : $WritableKeyPath<Struct, Int>
// CHECK-ONONE: destroy_value %{{.*}} : $WritableKeyPath<Struct, Int>
// CHECK-NOT: destroy
// CHECK-LABEL: } // end sil function 'testBeginApply'
sil hidden [ossa] @testBeginApply : $@convention(thin) (@inout Struct) -> () {
bb0(%0 : $*Struct):
  %2 = keypath $WritableKeyPath<Struct, Int>, (root $Struct; stored_property #Struct.st : $Int)
  debug_value %2 : $WritableKeyPath<Struct, Int>, let, name "kp"
  %4 = copy_value %2 : $WritableKeyPath<Struct, Int>
  %5 = function_ref @swift_modifyAtWritableKeyPath : $@yield_once @convention(thin) <τ_0_0, τ_0_1> (@inout τ_0_0, @guaranteed WritableKeyPath<τ_0_0, τ_0_1>) -> @yields @inout τ_0_1
  (%6, %7) = begin_apply %5<Struct, Int>(%0, %4) : $@yield_once @convention(thin) <τ_0_0, τ_0_1> (@inout τ_0_0, @guaranteed WritableKeyPath<τ_0_0, τ_0_1>) -> @yields @inout τ_0_1
  %8 = function_ref @modifyInt : $@convention(thin) (@inout Int) -> ()
  %9 = apply %8(%6) : $@convention(thin) (@inout Int) -> ()
  end_apply %7
  destroy_value %4 : $WritableKeyPath<Struct, Int>
  destroy_value %2 : $WritableKeyPath<Struct, Int>
  %13 = tuple ()
  return %13 : $()
}

// -----------------------------------------------------------------------------
// Test project_box
// -----------------------------------------------------------------------------

// FIXME: project_box is currently a PointerEscape, so box live ranges are not canonicalized.
//
// CHECK-LABEL: sil [ossa] @testProjectBox : $@convention(thin) (@owned B) -> @owned B {
// CHECK: copy_value
// CHECK: destroy_value
// CHECK: destroy_value
// CHECK-LABEL: } // end sil function 'testProjectBox'
sil [ossa] @testProjectBox : $@convention(thin) (@owned B) -> @owned B {
bb0(%0 : @owned $B):
  %box = alloc_box $<τ_0_0> { var τ_0_0 } <B>
  %boxadr = project_box %box : $<τ_0_0> { var τ_0_0 } <B>, 0
  store %0 to [init] %boxadr : $*B
  %load = load [copy] %boxadr : $*B
  %copy = copy_value %box : $<τ_0_0> { var τ_0_0 } <B>
  destroy_value %box : $<τ_0_0> { var τ_0_0 } <B>
  destroy_value %copy : $<τ_0_0> { var τ_0_0 } <B>
  return %load : $B
}

// -----------------------------------------------------------------------------
// Test mark_dependence
// -----------------------------------------------------------------------------

// FIXME: mark_dependence is currently a PointerEscape, so dependent live ranges are not canonicalized.
//
// CHECK-LABEL: sil [ossa] @testMarkDependence : $@convention(thin) (@inout Builtin.Int64, @owned B) -> Builtin.Int64 {
// CHECK: copy_value
// CHECK: destroy_value
// CHECK: destroy_value
// CHECK-LABEL: } // end sil function 'testMarkDependence'
sil [ossa] @testMarkDependence : $@convention(thin) (@inout Builtin.Int64, @owned B) -> Builtin.Int64 {
bb0(%0 : $*Builtin.Int64, %1 : @owned $B):
  %ptr = mark_dependence %0 : $*Builtin.Int64 on %1 : $B
  %val = load [trivial] %ptr : $*Builtin.Int64
  %copy = copy_value %1 : $B
  destroy_value %1 : $B
  destroy_value %copy : $B
  return %val : $Builtin.Int64
}

// -----------------------------------------------------------------------------
// Test OperandOwnership::BitwiseEscape
// -----------------------------------------------------------------------------

// CHECK-LABEL: sil [ossa] @testBitwiseEscape : $@convention(thin) (@guaranteed C) -> Builtin.RawPointer {
// CHECK-OPT-NOT: copy_value
// CHECK-OPT-NOT: destroy_value
// CHECK-LABEL: } // end sil function 'testBitwiseEscape'
sil [ossa] @testBitwiseEscape : $@convention(thin) (@guaranteed C) -> Builtin.RawPointer {
bb0(%0 : @guaranteed $C):
  %raw = ref_to_raw_pointer %0 : $C to $Builtin.RawPointer
  %copy = copy_value %0 : $C
  destroy_value %copy : $C
  return %raw : $Builtin.RawPointer
}

// =============================================================================
// Test extending liveness though overlapping access scopes.
// =============================================================================

class X {}
class Y {}

sil [ossa] @getObject : $@convention(thin) () -> @owned AnyObject

// No overlap (access ignored):
//     def
//     use
//     begin_access
//     end_access
//     destroy
//
// CHECK-LABEL: sil [ossa] @testNoOverlapInLiveBlock : $@convention(thin) () -> () {
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK-OPT-NOT: copy_value
// CHECK-OPT:   store [[DEF]] to [init]
// CHECK-ONONE: [[CP:%.*]] = copy_value
// CHECK-ONONE: store [[CP]] to [init]
// CHECK:   begin_access
// CHECK:   end_access
// CHECK: bb1:
// CHECK-NOT:   destroy_value [[DEF]] : $AnyObject
// CHECK-LABEL: } // end sil function 'testNoOverlapInLiveBlock'
sil [ossa] @testNoOverlapInLiveBlock : $@convention(thin) () -> () {
bb0:
  %box = alloc_box ${ var AnyObject }, var, name "x"
  %adr = project_box %box : ${ var AnyObject }, 0
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  // use
  store %def to [init] %adr : $*AnyObject
  // end canonical lifetime
  %access = begin_access [read] [dynamic] %adr : $*AnyObject
  %obj = load [copy] %access : $*AnyObject
  end_access %access : $*AnyObject
  br bb1

bb1:
  %f2 = function_ref @takeGuaranteedAnyObject : $@convention(thin) (@guaranteed AnyObject) -> ()
  %call = apply %f2(%obj) : $@convention(thin) (@guaranteed AnyObject) -> ()
  destroy_value %copy : $AnyObject
  destroy_value %obj : $AnyObject
  destroy_value %box : ${ var AnyObject }
  %v = tuple ()
  return %v : $()
}

// No overlap (access ignored):
//     def
//     use
//     br...
// bb...
//     begin_access
//     end_access
//     destroy
//
// CHECK-LABEL: sil [ossa] @testNoOverlapInDeadBlock : $@convention(thin) () -> () {
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK-OPT-NOT: copy_value
// CHECK-OPT:   store [[DEF]] to [init] %{{.*}} : $*AnyObject
// CHECK-ONONE: [[CP:%.*]] = copy_value
// CHECK-ONONE: store [[CP]] to [init] %{{.*}} : $*AnyObject
// CHECK: br bb1
// CHECK: bb1:
// CHECK:   begin_access
// CHECK:   end_access
// CHECK: br bb2
// CHECK: bb2:
// CHECK-NOT: destroy_value [[DEF]] : $AnyObject
// CHECK-LABEL: } // end sil function 'testNoOverlapInDeadBlock'
sil [ossa] @testNoOverlapInDeadBlock : $@convention(thin) () -> () {
bb0:
  %box = alloc_box ${ var AnyObject }, var, name "x"
  %adr = project_box %box : ${ var AnyObject }, 0
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  // use
  store %def to [init] %adr : $*AnyObject
  // end canonical lifetime
  br bb1

bb1:
  %access = begin_access [read] [dynamic] %adr : $*AnyObject
  %obj = load [copy] %access : $*AnyObject
  end_access %access : $*AnyObject
  br bb2

bb2:
  %f2 = function_ref @takeGuaranteedAnyObject : $@convention(thin) (@guaranteed AnyObject) -> ()
  %call = apply %f2(%obj) : $@convention(thin) (@guaranteed AnyObject) -> ()
  destroy_value %copy : $AnyObject
  destroy_value %obj : $AnyObject
  destroy_value %box : ${ var AnyObject }
  %v = tuple ()
  return %v : $()
}

// Overlapping (must extend pruned liveness):
//
//     %def
//     begin_access // access scope unrelated to def
//     use %def     // pruned liveness ends here
//     end_access
//
// CHECK-LABEL: sil [ossa] @testOverlapInLiveBlock : $@convention(thin) () -> () {
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK:   begin_access
// CHECK:   [[COPY:%.*]] = copy_value [[DEF]] : $AnyObject
// CHECK:   store [[COPY]] to [init] %{{.*}} : $*AnyObject
// CHECK:   end_access
// CHECK-OPT:   destroy_value [[DEF]] : $AnyObject
// CHECK-ONONE: destroy_value [poison] [[DEF]] : $AnyObject
// CHECK: br bb1
// CHECK: bb1:
// CHECK-NOT: destroy_value [[DEF]] : $AnyObject
// CHECK-LABEL: } // end sil function 'testOverlapInLiveBlock'
sil [ossa] @testOverlapInLiveBlock : $@convention(thin) () -> () {
bb0:
  %box = alloc_box ${ var AnyObject }, var, name "x"
  %adr = project_box %box : ${ var AnyObject }, 0
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  %access = begin_access [read] [dynamic] %adr : $*AnyObject
  // use
  store %def to [init] %adr : $*AnyObject
  %obj = load [copy] %access : $*AnyObject
  end_access %access : $*AnyObject
  // Branch to avoid reusing the destroy_value
  br bb1

bb1:
  %f2 = function_ref @takeGuaranteedAnyObject : $@convention(thin) (@guaranteed AnyObject) -> ()
  %call = apply %f2(%obj) : $@convention(thin) (@guaranteed AnyObject) -> ()
  destroy_value %copy : $AnyObject
  destroy_value %obj : $AnyObject
  destroy_value %box : ${ var AnyObject }
  %v = tuple ()
  return %v : $()
}

// Overlapping (must extend pruned liveness):
//
//     %def
//     begin_access // access scope unrelated to def
//     use %def     // pruned liveness ends here
//     br...
//   bb...
//     end_access
//
// CHECK-LABEL: sil [ossa] @testOverlapInDeadBlock : $@convention(thin) () -> () {
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK:   begin_access
// CHECK:   [[COPY:%.*]] = copy_value [[DEF]] : $AnyObject
// CHECK:   store [[COPY]] to [init] %{{.*}} : $*AnyObject
// CHECK: br bb1
// CHECK: bb1:
// CHECK:   end_access
// CHECK-OPT:   destroy_value [[DEF]] : $AnyObject
// CHECK-ONONE: destroy_value [poison] [[DEF]] : $AnyObject
// CHECK: br bb2
// CHECK: bb2:
// CHECK-NOT: destroy_value [[DEF]] : $AnyObject
// CHECK-LABEL: } // end sil function 'testOverlapInDeadBlock'
sil [ossa] @testOverlapInDeadBlock : $@convention(thin) () -> () {
bb0:
  %box = alloc_box ${ var AnyObject }, var, name "x"
  %adr = project_box %box : ${ var AnyObject }, 0
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  %access = begin_access [read] [dynamic] %adr : $*AnyObject
  // use
  store %def to [init] %adr : $*AnyObject
  br bb1

bb1:
  %obj = load [copy] %access : $*AnyObject
  end_access %access : $*AnyObject
  br bb2

bb2:
  %f2 = function_ref @takeGuaranteedAnyObject : $@convention(thin) (@guaranteed AnyObject) -> ()
  %call = apply %f2(%obj) : $@convention(thin) (@guaranteed AnyObject) -> ()
  destroy_value %copy : $AnyObject
  destroy_value %obj : $AnyObject
  destroy_value %box : ${ var AnyObject }
  %v = tuple ()
  return %v : $()
}

// Fully Overlapping (must extend pruned liveness):
//
//     begin_access // access scope unrelated to def
//     %def
//     use %def     // pruned liveness ends here
//     end_access
//
// CHECK-LABEL: sil [ossa] @testFullOverlapInDefBlock : $@convention(thin) () -> () {
// CHECK:   begin_access
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK:   [[COPY:%.*]] = copy_value [[DEF]] : $AnyObject
// CHECK:   store [[COPY]] to [init] %{{.*}} : $*AnyObject
// CHECK:   end_access
// CHECK-OPT:   destroy_value [[DEF]] : $AnyObject
// CHECK-ONONE:   destroy_value [poison] [[DEF]] : $AnyObject
// CHECK: br bb1
// CHECK: bb1:
// CHECK-NOT: destroy_value [[DEF]] : $AnyObject
// CHECK-LABEL: } // end sil function 'testFullOverlapInDefBlock'
sil [ossa] @testFullOverlapInDefBlock : $@convention(thin) () -> () {
bb0:
  %box = alloc_box ${ var AnyObject }, var, name "x"
  %adr = project_box %box : ${ var AnyObject }, 0
  %access = begin_access [read] [dynamic] %adr : $*AnyObject
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  // use
  store %def to [init] %adr : $*AnyObject
  %obj = load [copy] %access : $*AnyObject
  end_access %access : $*AnyObject
  // Branch to avoid reusing the destroy_value
  br bb1

bb1:
  %f2 = function_ref @takeGuaranteedAnyObject : $@convention(thin) (@guaranteed AnyObject) -> ()
  %call = apply %f2(%obj) : $@convention(thin) (@guaranteed AnyObject) -> ()
  destroy_value %copy : $AnyObject
  destroy_value %obj : $AnyObject
  destroy_value %box : ${ var AnyObject }
  %v = tuple ()
  return %v : $()
}

// Fully Overlapping (must extend pruned liveness):
//
//     begin_access // access scope unrelated to def
//     br...
//   bb...
//     %def
//     use %def     // pruned liveness ends here
//     end_access
//
// CHECK-LABEL: sil [ossa] @testFullOverlapBeforeDefBlock : $@convention(thin) () -> () {
// CHECK:   begin_access
// CHECK: br bb1
// CHECK: bb1:
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK:   [[COPY:%.*]] = copy_value [[DEF]] : $AnyObject
// CHECK:   store [[COPY]] to [init] %{{.*}} : $*AnyObject
// CHECK:   end_access
// CHECK-OPT:   destroy_value [[DEF]] : $AnyObject
// CHECK-ONONE: destroy_value [poison] [[DEF]] : $AnyObject
// CHECK: br bb2
// CHECK: bb2:
// CHECK-NOT: destroy_value [[DEF]] : $AnyObject
// CHECK-LABEL: } // end sil function 'testFullOverlapBeforeDefBlock'
sil [ossa] @testFullOverlapBeforeDefBlock : $@convention(thin) () -> () {
bb0:
  %box = alloc_box ${ var AnyObject }, var, name "x"
  %adr = project_box %box : ${ var AnyObject }, 0
  %access = begin_access [read] [dynamic] %adr : $*AnyObject
  br bb1

bb1:
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  // use
  store %def to [init] %adr : $*AnyObject
  %obj = load [copy] %access : $*AnyObject
  end_access %access : $*AnyObject
  // Branch to avoid reusing the destroy_value
  br bb2

bb2:
  %f2 = function_ref @takeGuaranteedAnyObject : $@convention(thin) (@guaranteed AnyObject) -> ()
  %call = apply %f2(%obj) : $@convention(thin) (@guaranteed AnyObject) -> ()
  destroy_value %copy : $AnyObject
  destroy_value %obj : $AnyObject
  destroy_value %box : ${ var AnyObject }
  %v = tuple ()
  return %v : $()
}

// Original Overlapping (unnecessarilly extends pruned liveness):
//
// TODO: this copy could be avoided but is probably an unusual case,
// and sinking the destroy outside the access scope might help to
// optimize the access itself.
//
//     %def
//     begin_access // access scope unrelated to def
//     use %def     // pruned liveness ends here
//     destroy %def
//     end_access
//
// CHECK-LABEL: sil [ossa] @testOriginalOverlapInLiveBlock : $@convention(thin) () -> () {
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK:   begin_access
// CHECK:   [[COPY:%.*]] = copy_value [[DEF]] : $AnyObject
// CHECK:   store [[COPY]] to [init] %{{.*}} : $*AnyObject
// CHECK:   end_access
// CHECK:   destroy_value [[DEF]] : $AnyObject
// CHECK: br bb1
// CHECK-LABEL: } // end sil function 'testOriginalOverlapInLiveBlock'
sil [ossa] @testOriginalOverlapInLiveBlock : $@convention(thin) () -> () {
bb0:
  %box = alloc_box ${ var AnyObject }, var, name "x"
  %adr = project_box %box : ${ var AnyObject }, 0
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  %access = begin_access [read] [dynamic] %adr : $*AnyObject
  // use
  store %def to [init] %adr : $*AnyObject
  destroy_value %copy : $AnyObject
  %obj = load [copy] %access : $*AnyObject
  end_access %access : $*AnyObject
  br bb1

bb1:
  %f2 = function_ref @takeGuaranteedAnyObject : $@convention(thin) (@guaranteed AnyObject) -> ()
  %call = apply %f2(%obj) : $@convention(thin) (@guaranteed AnyObject) -> ()
  destroy_value %obj : $AnyObject
  destroy_value %box : ${ var AnyObject }
  %v = tuple ()
  return %v : $()
}

// Original Overlapping (unnecessarilly extends pruned liveness):
//
// TODO: this copy could be avoided but is probably an unusual case,
// and sinking the destroy outside the access scope might help to
// optimize the access itself.
//
//     %def
//     begin_access // access scope unrelated to def
//     use %def     // pruned liveness ends here
//     br bb1
// bb1:
//     destroy %def
//     end_access
//
// CHECK-LABEL: sil [ossa] @testOriginalOverlapInDeadBlock : $@convention(thin) () -> () {
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK:   begin_access
// CHECK:   [[COPY:%.*]] = copy_value [[DEF]] : $AnyObject
// CHECK:   store [[COPY]] to [init] %{{.*}} : $*AnyObject
// CHECK:   br bb1
// CHECK: bb1:
// CHECK:   end_access
// CHECK:   destroy_value [[DEF]] : $AnyObject
// CHECK-LABEL: } // end sil function 'testOriginalOverlapInDeadBlock'
sil [ossa] @testOriginalOverlapInDeadBlock : $@convention(thin) () -> () {
bb0:
  %box = alloc_box ${ var AnyObject }, var, name "x"
  %adr = project_box %box : ${ var AnyObject }, 0
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  %access = begin_access [read] [dynamic] %adr : $*AnyObject
  // use
  store %def to [init] %adr : $*AnyObject
  br bb1

bb1:
  destroy_value %copy : $AnyObject
  %obj = load [copy] %access : $*AnyObject
  end_access %access : $*AnyObject
  destroy_value %obj : $AnyObject
  destroy_value %box : ${ var AnyObject }
  %v = tuple ()
  return %v : $()
}

// Interleaved access (requires iterative lifetime extension):
//
//     %def
//     begin_access X
//     use %def        // Initial pruned lifetime boundary
//     begin_access Y
//     end_access X    // Lifetime boundary after first extension
//     end_access Y    // Lifetime boundary after second extension
//     destroy %def
//
// CHECK-LABEL: sil [ossa] @testInterleavedAccessScope : $@convention(thin) (@inout AnyObject) -> () {
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK:   begin_access {{.*}} : $*X
// CHECK:   [[COPY:%.*]] = copy_value [[DEF]] : $AnyObject
// CHECK:   store [[COPY]] to [assign] %{{.*}} : $*AnyObject
// CHECK:   begin_access {{.*}} : $*Y
// CHECK:   end_access {{.*}} : $*X
// CHECK:   end_access {{.*}} : $*Y
// CHECK-OPT:   destroy_value [[DEF]] : $AnyObject
// CHECK-ONONE: destroy_value [poison] [[DEF]] : $AnyObject
// CHECK:   br bb1
// CHECK: bb1:
// CHECK-NOT: destroy_value {{.*}} : $AnyObject
// CHECK-LABEL: } // end sil function 'testInterleavedAccessScope'
sil [ossa] @testInterleavedAccessScope : $@convention(thin) (@inout AnyObject) -> () {
bb0(%0 : $*AnyObject):
  %x = alloc_box ${ var X }, var, name "x"
  %xadr = project_box %x : ${ var X }, 0
  %y = alloc_box ${ var Y }, var, name "y"
  %yadr = project_box %y : ${ var Y }, 0
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  %accessX = begin_access [read] [dynamic] %xadr : $*X
  // use
  store %def to [assign] %0 : $*AnyObject
  %accessY = begin_access [read] [dynamic] %yadr : $*Y
  // accessX overlaps pruned liveness on the first iteration
  end_access %accessX : $*X
  // accessY only overlaps pruned liveness on the second iteration
  end_access %accessY : $*Y
  br bb1

bb1:
  destroy_value %copy : $AnyObject
  destroy_value %y : ${ var Y }
  destroy_value %x : ${ var X }
  %v = tuple ()
  return %v : $()
}

// Interleaved non-local access (requires iterative lifetime extension):
//
//     %def
//     begin_access X
//     use %def        // Initial pruned lifetime boundary
//     br bb1
//   bb1:
//     begin_access Y
//     br bb2
//   bb2:
//     end_access X    // Lifetime boundary after first extension
//     br bb3
//   bb3:
//     end_access Y    // Lifetime boundary after second extension
//     br bb4
//   bb4:
//     destroy %def
//
// CHECK-LABEL: sil [ossa] @testInterleavedNonLocalAccessScope : $@convention(thin) (@inout AnyObject) -> () {
// CHECK:   [[DEF:%.*]] = apply %{{.*}}() : $@convention(thin) () -> @owned AnyObject
// CHECK:   begin_access {{.*}} : $*X
// CHECK:   [[COPY:%.*]] = copy_value [[DEF]] : $AnyObject
// CHECK:   store [[COPY]] to [assign] %{{.*}} : $*AnyObject
// CHECK:   br bb1
// CHECK: bb1:
// CHECK:   begin_access {{.*}} : $*Y
// CHECK:   br bb2
// CHECK: bb2:
// CHECK:   end_access {{.*}} : $*X
// CHECK:   br bb3
// CHECK: bb3:
// CHECK:   end_access {{.*}} : $*Y
// CHECK-OPT:   destroy_value [[DEF]] : $AnyObject
// CHECK-ONONE:   destroy_value [poison] [[DEF]] : $AnyObject
// CHECK:   br bb4
// CHECK: bb4:
// CHECK-NOT: destroy_value {{.*}} : $AnyObject
// CHECK-LABEL: } // end sil function 'testInterleavedNonLocalAccessScope'
sil [ossa] @testInterleavedNonLocalAccessScope : $@convention(thin) (@inout AnyObject) -> () {
bb0(%0 : $*AnyObject):
  %x = alloc_box ${ var X }, var, name "x"
  %xadr = project_box %x : ${ var X }, 0
  %y = alloc_box ${ var Y }, var, name "y"
  %yadr = project_box %y : ${ var Y }, 0
  %f = function_ref @getObject : $@convention(thin) () -> @owned AnyObject
  // def
  %def = apply %f() : $@convention(thin) () -> @owned AnyObject
  %copy = copy_value %def : $AnyObject
  %accessX = begin_access [read] [dynamic] %xadr : $*X
  // use
  store %def to [assign] %0 : $*AnyObject
  br bb1

bb1:
  %accessY = begin_access [read] [dynamic] %yadr : $*Y
  br bb2

bb2:
  // accessX overlaps pruned liveness on the first iteration
  end_access %accessX : $*X
  br bb3

bb3:
  // accessY only overlaps pruned liveness on the second iteration
  end_access %accessY : $*Y
  br bb4

bb4:
  destroy_value %copy : $AnyObject
  destroy_value %y : ${ var Y }
  destroy_value %x : ${ var X }
  %v = tuple ()
  return %v : $()
}

// Test a dead begin_borrow (with no scope ending uses). Make sure
// copy-propagation doesn't end the lifetime before the dead borrow.
//
// CHECK-LABEL: sil hidden [ossa] @testDeadBorrow : $@convention(thin) (@owned C) -> () {
// CHECK: bb0(%0 : @owned $C):
// CHECK:   copy_value %0 : $C
// CHECK:   destroy_value
// CHECK:   copy_value %0 : $C
// CHECK:   begin_borrow
// CHECK:   unreachable
// CHECK-LABEL: } // end sil function 'testDeadBorrow'
sil hidden [ossa] @testDeadBorrow : $@convention(thin) (@owned C) -> () {
bb0(%0 : @owned $C):
  %1 = copy_value %0 : $C
  destroy_value %1 : $C
  %6 = copy_value %0 : $C
  %7 = begin_borrow %6 : $C
  unreachable
}
