@propertyWrapper
struct /*wrapper:def*/Foo<T> {
    public var wrappedValue: T
    init(initialValue: T) {
        wrappedValue = initialValue
    }
    init(initialValue: T, otherThing: Bool) {
        self.init(initialValue: initialValue)
    }
    var projectedValue: Projection<T> {
      get { Projection(item: wrappedValue) }
    }
}

struct Projection<T> {
    var item: T
}

@resultBuilder
struct /*builder:def*/Other {
    public static func buildBlock(_ components: String...) -> String {
        return components.joined()
    }
}

struct Bar {
    @/*wrapper*/Foo
    var /*wrapped:def*/descriptive: Int = 10
    @/*wrapper*/Foo(initialValue: "hello")
    var bar: String
    @/*wrapper*/Foo
    var jim: String = {
        struct Bar {
            @/*wrapper*/Foo
            var inner: String = "It's 42"
        }
        return Bar().inner
    }()

    func combined(@/*builder*/Other _ a: () -> String) -> String {
        return a()
    }

     @/*builder*/Other
    func hello() -> String {
        "hello"
        "there"
    }

    func baz() {
        let _: /*wrapper*/Foo<Int> = /*wrapped+1*/_descriptive
        let _: Int = /*wrapped+1*/_descriptive.wrappedValue
        let _: Int = /*wrapped*/descriptive
        let _: Projection<Int> = /*wrapped+1*/$descriptive
        let _: /*wrapper*/Foo<String> = _bar
    }
}


