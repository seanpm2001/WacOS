// RUN: %target-run-simple-swift
// REQUIRES: executable_test

import StdlibUnittest

var CharacterPropertiesTests = TestSuite("StringTests")

CharacterPropertiesTests.test("ASCII queries") {
  for cu in (0 as UInt32)...(0x7F as UInt32) {
    let c = Character(Unicode.Scalar(cu)!)
    expectTrue(c.isASCII)
    expectEqual(cu, UInt32(c.asciiValue!))
  }
  expectTrue(Character("\r\n").isASCII)
  expectEqual(Character("\n").asciiValue, Character("\r\n").asciiValue)

  expectFalse(Character("‚Öö").isASCII)
  expectFalse(Character("‚Äú").isASCII)
  expectFalse(Character("e\u{301}").isASCII)
}

CharacterPropertiesTests.test("Hex queries") {
  let hexDigits: Array<Character> = [
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", // 0-9
    "a", "b", "c", "d", "e", "f", // 10-15
    "A", "B", "C", "D", "E", "F", // 16-21
    "Ôºê", "Ôºë", "Ôºí", "Ôºì", "Ôºî", "Ôºï", "Ôºñ", "Ôºó", "Ôºò", "Ôºô", // 22-31
    "Ôº°", "Ôº¢", "Ôº£", "Ôº§", "Ôº•", "Ôº¶", // 32-37
    "ÔΩÅ", "ÔΩÇ", "ÔΩÉ", "ÔΩÑ", "ÔΩÖ", "ÔΩÜ", // 38-43
  ]

  // Ensure below loop logic is correct with a couple hard-coded checks
  expectEqual(1, Character("1").hexDigitValue!)
  expectEqual(2, Character("Ôºí").hexDigitValue!)
  expectEqual(11, Character("Ôº¢").hexDigitValue!)
  expectEqual(12, Character("c").hexDigitValue!)
  expectEqual(14, Character("ÔΩÖ").hexDigitValue!)
  expectEqual(15, Character("f").hexDigitValue!)

  for i in hexDigits.indices {
    let hexValue = hexDigits[i].hexDigitValue!
    switch i {
      case 0...15: expectEqual(i, hexValue)
      case 16...21: expectEqual(i-6, hexValue)
      case 22...37: expectEqual(i-22, hexValue)
      case 38...43: expectEqual(i-28, hexValue)
      default: print(i); fatalError("unreachable")
    }
  }

  expectNil(Character("„äà").hexDigitValue)
  expectNil(Character("‚Ö§").hexDigitValue)
  expectNil(Character("7\u{301}").hexDigitValue)
}

CharacterPropertiesTests.test("Numbers") {
  // Some hard coded tests
  expectTrue(Character("‚Öö").isNumber)
  expectTrue(Character("5Ô∏è‚É£").isNumber)
  expectTrue(Character("ùü†").isNumber)
  expectTrue(Character("„äà").isNumber)
  expectTrue(Character("7").isNumber)
  expectTrue(Character("êπæ").isNumber) // RUMI FRACTION 2/3

  expectFalse(Character("A").isNumber)
  expectFalse(Character("Z").isNumber)
}

CharacterPropertiesTests.test("Whole Numbers") {
  // Random smattering of hard-coded tests
  expectEqual(0, Character("‚Üâ").wholeNumberValue) // baseball scoring
  expectEqual(0, Character("ùü∂").wholeNumberValue) // math monospace
  expectEqual(1, Character("1").wholeNumberValue)
  expectEqual(1, Character("íê¥").wholeNumberValue)
  expectEqual(1, Character("‚Ö∞").wholeNumberValue) // small roman numeral
  expectEqual(1, Character("ùüè").wholeNumberValue) // math bold
  expectEqual(2, Character("‚ë°").wholeNumberValue)
  expectEqual(2, Character("Ÿ¢").wholeNumberValue)
  expectEqual(2, Character("‡ß®").wholeNumberValue)
  expectEqual(2, Character("‡©®").wholeNumberValue)
  expectEqual(2, Character("‡´®").wholeNumberValue)
  expectEqual(3, Character("¬≥").wholeNumberValue)
  expectEqual(4, Character("Ÿ§").wholeNumberValue)
  expectEqual(4, Character("‡µ™").wholeNumberValue)
  expectEqual(4, Character("‡≥™").wholeNumberValue)
  expectEqual(4, Character("‡±™").wholeNumberValue)
  expectEqual(4, Character("‡Ø™").wholeNumberValue)
  expectEqual(4, Character("‡≠™").wholeNumberValue)
  expectEqual(4, Character("‡´™").wholeNumberValue)
  expectEqual(4, Character("‡©™").wholeNumberValue)
  expectEqual(4, Character("‡πî").wholeNumberValue)
  expectEqual(4, Character("‡ªî").wholeNumberValue)
  expectEqual(5, Character("‡•´").wholeNumberValue)
  expectEqual(5, Character("‡º•").wholeNumberValue)
  expectEqual(5, Character("·ç≠").wholeNumberValue)
  expectEqual(5, Character("·†ï").wholeNumberValue)
  expectEqual(5, Character("‚Ö§").wholeNumberValue) // Roman numeral
  expectEqual(5, Character("êå°").wholeNumberValue)
  expectEqual(5, Character("ﬂÖ").wholeNumberValue)
  expectEqual(5, Character("·≠ï").wholeNumberValue)
  expectEqual(5, Character("ùç§").wholeNumberValue)
  expectEqual(5, Character("·Æµ").wholeNumberValue)
  expectEqual(6, Character("ÂÖ≠").wholeNumberValue)
  expectEqual(6, Character("Ôßë").wholeNumberValue) // Compatibility
  expectEqual(7, Character("ùü©").wholeNumberValue) // Math san-serif
  expectEqual(7, Character("„à¶").wholeNumberValue)
  expectEqual(7, Character("„äÜ").wholeNumberValue)
  expectEqual(7, Character("ëÅ≠").wholeNumberValue)
  expectEqual(8, Character("Íßò").wholeNumberValue)
  expectEqual(8, Character("·™à").wholeNumberValue)
  expectEqual(8, Character("·™ò").wholeNumberValue)
  expectEqual(8, Character("Í©ò").wholeNumberValue)
  expectEqual(9, Character("‡πô").wholeNumberValue)

  expectEqual(18, Character("‚íÖ").wholeNumberValue)
  expectEqual(20, Character("‚ë≥").wholeNumberValue)
  expectEqual(20, Character("êÑë").wholeNumberValue)
  expectEqual(20, Character("êèî").wholeNumberValue)
  expectEqual(20, Character("ê§ò").wholeNumberValue)
  expectEqual(20, Character("„Äπ").wholeNumberValue)
  expectEqual(50, Character("‚ÜÜ").wholeNumberValue)
  expectEqual(70, Character("ëÅ°").wholeNumberValue)
  expectEqual(90, Character("êçÅ").wholeNumberValue)
  expectEqual(1_000, Character("ëÅ•").wholeNumberValue)
  expectEqual(5_000, Character("‚ÜÅ").wholeNumberValue)
  expectEqual(10_000, Character("‰∏á").wholeNumberValue)

  expectFalse(Character("7\u{301}").isWholeNumber)
}

CharacterPropertiesTests.test("Casing") {
  let eAccent = Character("\u{0065}\u{0301}")
  let EAccent = Character("\u{0045}\u{0301}")
  expectTrue(eAccent.isLowercase && eAccent.isCased)
  expectFalse(eAccent.isUppercase)
  expectTrue(EAccent.isUppercase && EAccent.isCased)
  expectFalse(EAccent.isLowercase)

  expectTrue(Character("–ò").isUppercase)
  expectTrue(Character("–∏").isLowercase)
  expectTrue(Character("Œ†").isUppercase)
  expectTrue(Character("œÄ").isLowercase)

  expectEqual("SS", Character("√ü").uppercased())

  expectEqual("√ü", Character("·∫û").lowercased())

  expectEqual("–∏", Character("–ò").lowercased())
  expectEqual("–ò", Character("–∏").uppercased())
  expectEqual("œÄ", Character("Œ†").lowercased())
  expectEqual("Œ†", Character("œÄ").uppercased())
}

CharacterPropertiesTests.test("Punctuation") {
  expectTrue(Character("!").isPunctuation)
  expectTrue(Character("ÿü").isPunctuation)
  expectTrue(Character("‚Ä¶").isPunctuation)
  expectTrue(Character("‚Äî").isPunctuation)
  expectTrue(Character("‚Äú").isPunctuation)

  expectTrue(Character("Ôπè").isPunctuation) // compatibility
}

CharacterPropertiesTests.test("Symbols") {
  // Other symbols
  expectTrue(Character("üåç").isSymbol)
  expectTrue(Character("üëΩ").isSymbol)
  expectTrue(Character("¬Æ").isSymbol)
  expectTrue(Character("‚åπ").isSymbol)
  expectTrue(Character("‚°Ü").isSymbol)

  // Currency
  expectTrue(Character("$").isCurrencySymbol)
  expectTrue(Character("¬•").isCurrencySymbol)
  expectTrue(Character("‚Ç¨").isCurrencySymbol)

  // Math symbols
  expectTrue(Character("‚à©").isSymbol)
  expectTrue(Character("‚à©").isMathSymbol)
  expectTrue(Character("+").isSymbol)
  expectTrue(Character("+").isMathSymbol)
  expectTrue(Character("‚ü∫").isSymbol)
  expectTrue(Character("‚ü∫").isMathSymbol)
  expectTrue(Character("‚à´").isSymbol)
  expectTrue(Character("‚à´").isMathSymbol)

  // Math symbols that are letters
  expectFalse(Character("œ∞").isSymbol)
  expectTrue(Character("œ∞").isMathSymbol)
}

CharacterPropertiesTests.test("Whitespace") {
  expectTrue(Character("\t").isWhitespace)
  expectTrue(Character(" ").isWhitespace)
  expectTrue(Character("\u{2029}").isWhitespace)
  expectTrue(Character("\u{3000}").isWhitespace)
}

CharacterPropertiesTests.test("Newline") {
  expectTrue(Character("\n").isNewline)
  expectTrue(Character("\r").isNewline)
  expectTrue(Character("\r\n").isNewline)
  expectTrue(Character("\u{0085}").isNewline)
  expectTrue(Character("\u{2028}").isNewline)
  expectTrue(Character("\u{2029}").isNewline)
}

runAllTests()

