// RUN: %target-sil-opt -enable-sil-verify-all -inline %s | %FileCheck %s

// Check cloning of instructions.

sil_stage canonical

import Builtin

class X {
}

sil [always_inline] @callee_alloc_ref_stack : $@convention(thin) () -> () {
bb0:
  %0 = alloc_ref [stack] $X
  dealloc_ref [stack] %0 : $X
  %r = tuple ()
  return %r : $()
}

// CHECK-LABEL: sil @caller_alloc_ref_stack : $@convention(thin) () -> ()
// CHECK: [[X:%[0-9]+]] = alloc_ref [stack] $X
// CHECK: dealloc_ref [stack] [[X]] : $X
sil @caller_alloc_ref_stack : $@convention(thin) () -> () {
bb0:
  %0 = function_ref @callee_alloc_ref_stack : $@convention(thin) () -> ()
  %1 = apply %0() : $@convention(thin) () -> ()
  %2 = tuple ()
  return %2 : $()
}

sil [ossa] [always_inline] @callee_begin_borrow_lexical : $@convention(thin) () -> () {
  %instance = alloc_ref $X
  %guaranteed_c = begin_borrow [lexical] %instance : $X
  end_borrow %guaranteed_c : $X
  destroy_value %instance : $X
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @caller_begin_borrow_lexical
// CHECK: begin_borrow [lexical]
// CHECK-LABEL: } // end sil function 'caller_begin_borrow_lexical'
sil [ossa] @caller_begin_borrow_lexical : $@convention(thin) () -> () {
  %callee_begin_borrow_lexical = function_ref @callee_begin_borrow_lexical : $@convention(thin) () -> ()
  %res = apply %callee_begin_borrow_lexical() : $@convention(thin) () -> ()
  return %res : $()
}

sil [ossa] @callee_alloc_stack : $@convention(thin) () -> () {
  %instance = alloc_stack $Builtin.NativeObject
  dealloc_stack %instance : $*Builtin.NativeObject
  %instance2 = alloc_stack [dynamic_lifetime] $Builtin.NativeObject
  dealloc_stack %instance2 : $*Builtin.NativeObject
  %instance3 = alloc_stack [lexical] $Builtin.NativeObject
  dealloc_stack %instance3 : $*Builtin.NativeObject
  %instance4 = alloc_stack [dynamic_lifetime] [lexical] $Builtin.NativeObject
  dealloc_stack %instance4 : $*Builtin.NativeObject
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @caller_alloc_stack_lexical
// CHECK: alloc_stack
// CHECK: alloc_stack [dynamic_lifetime]
// CHECK: alloc_stack [lexical]
// CHECK: alloc_stack [dynamic_lifetime] [lexical]
// CHECK-LABEL: } // end sil function 'caller_alloc_stack_lexical'
sil [ossa] @caller_alloc_stack_lexical : $@convention(thin) () -> () {
  %callee_alloc_stack = function_ref @callee_alloc_stack : $@convention(thin) () -> ()
  %res = apply %callee_alloc_stack() : $@convention(thin) () -> ()
  return %res : $()
}
