// RUN: %target-sil-opt -enable-sil-verify-all %s -definite-init | %FileCheck %s

// These are all regression tests to ensure that the memory promotion pass
// doesn't crash.

import Builtin
import Swift


// Mixed combination of aggregate load/stores and elements.
struct Triple {
  var a, b, c : Int
}

// CHECK-LABEL: sil @TripleTest
sil @TripleTest : $@convention(method) (Int, @inout Triple) -> Triple {
bb0(%0 : $Int, %1 : $*Triple):
  %4 = alloc_box $Triple
  %4a = project_box %4 : $@box Triple
  %5 = load %1 : $*Triple
  store %5 to %4a : $*Triple
  %8 = struct_element_addr %4a : $*Triple, #Triple.b
  store %0 to %8 : $*Int
  %10 = load %4a : $*Triple
  strong_release %4 : $@box Triple
  return %10 : $Triple
}


struct Single {
  var a : Int
}

// CHECK-LABEL: sil @SingleTest
sil @SingleTest : $@convention(method) (@inout Single, Int) -> Single {
bb0(%0 : $*Single, %1 : $Int):
  %4 = alloc_box $Single
  %4a = project_box %4 : $@box Single
  %5 = load %0 : $*Single
  store %5 to %4a : $*Single
  
  %8 = struct_element_addr %4a : $*Single, #Single.a
  store %1 to %8 : $*Int

  %10 = load %4a : $*Single
  strong_release %4 : $@box Single
  return %10 : $Single
}


class SomeClass {}

enum SomeUnion {
  case x(Int)
  case y(SomeClass)
}

sil @getSomeClass : $@convention(thin) (@thick SomeClass.Type) -> @owned SomeClass
sil @getSomeUnion : $@convention(thin) (@owned SomeClass, @thin SomeUnion.Type) -> @owned SomeUnion


// CHECK-LABEL: sil @test_union_release
sil @test_union_release : $@convention(thin) () -> () {
bb0:
  %0 = tuple ()
  %1 = alloc_box $SomeUnion                       // users: %9, %8
  %1a = project_box %1 : $@box SomeUnion
  %2 = function_ref @getSomeUnion : $@convention(thin) (@owned SomeClass, @thin SomeUnion.Type) -> @owned SomeUnion // user: %7
  %3 = metatype $@thin SomeUnion.Type               // user: %7
  %4 = function_ref @getSomeClass : $@convention(thin) (@thick SomeClass.Type) -> @owned SomeClass // user: %6
  %5 = metatype $@thick SomeClass.Type               // user: %6
  %6 = apply %4(%5) : $@convention(thin) (@thick SomeClass.Type) -> @owned SomeClass // user: %7
  %7 = apply %2(%6, %3) : $@convention(thin) (@owned SomeClass, @thin SomeUnion.Type) -> @owned SomeUnion // user: %8
  assign %7 to %1a : $*SomeUnion
  strong_release %1 : $@box SomeUnion
  %10 = tuple ()                                  // user: %11
  return %10 : $()
}

public protocol Proto {
}

public struct MyErrorType {}

public struct NonTrivial {
  @sil_stored let ptr: Builtin.NativeObject
}

public struct AStruct {
  @sil_stored public let name: NonTrivial
  @sil_stored public let foobar: NonTrivial
  @sil_stored public let protoType: Proto.Type
}


sil @mayThrow : $@convention(thin) () -> (NonTrivial, @error MyErrorType)

// CHECK-LABEL: sil @assign_of_non_primitive_object_element_type
sil @assign_of_non_primitive_object_element_type : $@convention(thin) (@thick Proto.Type) -> (@owned AStruct, @error MyErrorType) {
bb0(%0 : $@thick Proto.Type):
  %3 = alloc_stack $AStruct
  %4 = mark_uninitialized [rootself] %3 : $*AStruct
  %7 = function_ref @mayThrow : $@convention(thin) () -> (NonTrivial, @error MyErrorType)
  try_apply %7() : $@convention(thin) () -> (NonTrivial, @error MyErrorType), normal bb1, error bb3

bb1(%15 : $NonTrivial):
  %16 = struct_element_addr %4 : $*AStruct, #AStruct.foobar
  assign %15 to %16 : $*NonTrivial
  try_apply %7() : $@convention(thin) () -> (NonTrivial, @error MyErrorType), normal bb2, error bb4

bb2(%26 : $NonTrivial):
  %27 = struct_element_addr %4 : $*AStruct, #AStruct.name
  assign %26 to %27 : $*NonTrivial
  %29 = struct_element_addr %4 : $*AStruct, #AStruct.protoType
  assign %0 to %29 : $*@thick Proto.Type
  %31 = load %4 : $*AStruct
  retain_value %31 : $AStruct
  destroy_addr %4 : $*AStruct
  dealloc_stack %3 : $*AStruct
  return %31 : $AStruct

bb3(%36 : $MyErrorType):
  br bb5(%36 : $MyErrorType)

bb4(%38 : $MyErrorType):
  br bb5(%38 : $MyErrorType)

bb5(%40 : $MyErrorType):
  destroy_addr %4 : $*AStruct
  dealloc_stack %3 : $*AStruct
  throw %40 : $MyErrorType
}

