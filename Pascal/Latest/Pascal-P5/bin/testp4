#!/bin/bash
#
# test p4 compile and run
#
echo
echo Test compile and run of Pascal-P4

#
# Compile p4
#
echo Compiling pcom to intermediate code ...
compile p4/pcom
if [ $? -ne 0 ]
then

    echo "*** Compile failed"
    exit 1
    
fi
#
# Copy the test file to the input file and compile it via interpreted p4
#
cp p4/standardp.pas p4/pcom.inp
echo Compiling test file with interpreted P4 pcomp
run p4/pcom
# cat p4/pcom.lst
#
# For neatness sake, copy out the intermediate to .p4 file
#
cp p4/pcom.out p4/standardp.p4
#
# Compile pint
#
echo Compiling pint to intermediate code
compile p4/pint
if [ $? -ne 0 ]
then

    echo "*** Compile failed"
    exit 1
    
fi
#
# Add the final target program to the end of pint.
# This means that the version of pint will read and interpret
# this.
#
# For those of you having fun reading this, yes, the next statement accurately
# describes what is going on: we are concatenating and running two different
# intermediate codes together in completely different formats!
#
cat p4/pint.p5 p4/standardp.p4 > tmp.p5
rm -f p4/pint.p5
cp tmp.p5 p4/pint.p5
#
# Create null input file
#
echo > p4/pint.inp
#
# Now run pint(p4) on pint(p5), which runs the test program.
#
echo Running pint\(p4\) on pint\(p5\) to execute test program
run p4/pint
#
# Copy the result listing back to standardp.lst, again for neatness
#
cp p4/pint.lst p4/standardp.lst
#
# Now compare with reference
#
echo "Comparing result to reference"
diffnole p4/standardp.lst p4/standardp.cmp > p4/standardp.dif
#
## pass if diff file is empty
if test -s p4/standardp.dif; then
    echo "*** FAIL"
else
    echo "PASS"
fi

rm -f p4/pcom.inp
rm -f p4/pint.inp
